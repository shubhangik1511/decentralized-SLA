/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

/** WithRequired type helpers */
type WithRequired<T, K extends keyof T> = T & { [P in K]-?: T[P] };

export interface paths {
    "/apikeys": {
        /** Get info about the API Keys */
        get: {
            responses: {
                /** @description API Keys Retrieved */
                200: {
                    content: {
                        "application/json": components["schemas"]["APIKey"][];
                    };
                };
                500: components["responses"]["InternalError"];
            };
        };
        /** Create a new API Key */
        post: {
            requestBody: {
                content: {
                    "application/json": components["schemas"]["APIKey_Create_Input"];
                };
            };
            responses: {
                /** @description API Key Updated */
                200: {
                    content: {
                        "application/json": components["schemas"]["APIKey"];
                    };
                };
                /** @description API Key Created */
                201: {
                    content: {
                        "application/json": components["schemas"]["APIKey"];
                    };
                };
                404: components["responses"]["NotFound"];
                500: components["responses"]["InternalError"];
            };
        };
    };
    "/apikeys/{apikey_id}": {
        /** Get a specific API Key */
        get: {
            parameters: {
                path: {
                    apikey_id: components["parameters"]["apikey_id"];
                };
            };
            responses: {
                /** @description API Key Retrieved */
                200: {
                    content: {
                        "application/json": components["schemas"]["APIKey"];
                    };
                };
                404: components["responses"]["NotFound"];
                500: components["responses"]["InternalError"];
            };
        };
        /** Delete an API Key */
        delete: {
            parameters: {
                path: {
                    apikey_id: components["parameters"]["apikey_id"];
                };
            };
            responses: {
                /** @description API Key Deleted */
                204: never;
                404: components["responses"]["NotFound"];
                500: components["responses"]["InternalError"];
            };
        };
        /** Update an API Key */
        patch: {
            parameters: {
                path: {
                    apikey_id: components["parameters"]["apikey_id"];
                };
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["APIKey_Update_Input"];
                };
            };
            responses: {
                /** @description API Key Updated */
                200: {
                    content: {
                        "application/json": components["schemas"]["APIKey"];
                    };
                };
                /** @description API Key Created */
                201: {
                    content: {
                        "application/json": components["schemas"]["APIKey"];
                    };
                };
                404: components["responses"]["NotFound"];
                500: components["responses"]["InternalError"];
            };
        };
    };
    "/consortia/{consortia_id}/environments/{environment_id}/appcreds": {
        /** Get the Application Credentials of a particular environment */
        get: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                    environment_id: components["parameters"]["environment_id"];
                };
            };
            responses: {
                /** @description Application Credentials Retrieved */
                200: {
                    content: {
                        "application/json": components["schemas"]["ApplicationCredential"][];
                    };
                };
                500: components["responses"]["InternalError"];
            };
        };
        /** Create new Application Credentials */
        post: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                    environment_id: components["parameters"]["environment_id"];
                };
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["ApplicationCredential"];
                };
            };
            responses: {
                /** @description Application Credential Updated */
                200: {
                    content: {
                        "application/json": components["schemas"]["ApplicationCredential"];
                    };
                };
                /** @description Application Credential Created */
                201: {
                    content: {
                        "application/json": components["schemas"]["ApplicationCredential"];
                    };
                };
                404: components["responses"]["NotFound"];
                500: components["responses"]["InternalError"];
            };
        };
    };
    "/consortia/{consortia_id}/environments/{environment_id}/appcreds/{appkey_id}": {
        /** Get a specific Application Credential */
        get: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                    environment_id: components["parameters"]["environment_id"];
                    appkey_id: components["parameters"]["appkey_id"];
                };
            };
            responses: {
                /** @description Application Credential Retrieved */
                200: {
                    content: {
                        "application/json": components["schemas"]["ApplicationCredential"];
                    };
                };
                /** @description Application Credential Not Found */
                404: never;
                500: components["responses"]["InternalError"];
            };
        };
        /** Upsert a specific Application Credential */
        put: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                    environment_id: components["parameters"]["environment_id"];
                    appkey_id: components["parameters"]["appkey_id"];
                };
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["ApplicationCredential"];
                };
            };
            responses: {
                /** @description Application Credential Updated */
                200: {
                    content: {
                        "application/json": components["schemas"]["ApplicationCredential"];
                    };
                };
                /** @description Application Credential Created */
                201: {
                    content: {
                        "application/json": components["schemas"]["ApplicationCredential"];
                    };
                };
                /** @description Application Credential Not Found */
                404: never;
                500: components["responses"]["InternalError"];
            };
        };
        /** Delete an Application Credential */
        delete: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                    environment_id: components["parameters"]["environment_id"];
                    appkey_id: components["parameters"]["appkey_id"];
                };
            };
            responses: {
                /** @description Application Credential Deleted */
                204: never;
                /** @description Application Credential Not Found */
                404: never;
                500: components["responses"]["InternalError"];
            };
        };
        /** Update a specific Application Credential */
        patch: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                    environment_id: components["parameters"]["environment_id"];
                    appkey_id: components["parameters"]["appkey_id"];
                };
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["ApplicationCredential"];
                };
            };
            responses: {
                /** @description Application Credential Updated */
                200: {
                    content: {
                        "application/json": components["schemas"]["ApplicationCredential"];
                    };
                };
                /** @description Application Credential Created */
                201: {
                    content: {
                        "application/json": components["schemas"]["ApplicationCredential"];
                    };
                };
                /** @description Application Credential Not Found */
                404: never;
                500: components["responses"]["InternalError"];
            };
        };
    };
    "/consortia/{consortia_id}/environments/{environment_id}/appcreds/{appkey_id}/regenerate": {
        /** Regenerate the password for a specific app cred */
        post: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                    environment_id: components["parameters"]["environment_id"];
                    appkey_id: components["parameters"]["appkey_id"];
                };
            };
            responses: {
                /** @description Application Credential Updated */
                200: {
                    content: {
                        "application/json": components["schemas"]["ApplicationCredential"];
                    };
                };
                /** @description Application Credential Created */
                201: {
                    content: {
                        "application/json": components["schemas"]["ApplicationCredential"];
                    };
                };
                /** @description Application Credential Not Found */
                404: never;
                500: components["responses"]["InternalError"];
            };
        };
    };
    "/audit": {
        /** Get all events with the provided jwt */
        get: {
            responses: {
                /** @description Audit Retrieved */
                200: {
                    content: {
                        "application/json": components["schemas"]["Audit"][];
                    };
                };
                500: components["responses"]["InternalError"];
            };
        };
    };
    "/audit/{consortia_id}": {
        /** Get all events for a particular consortia */
        get: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                };
            };
            responses: {
                /** @description Audit Retrieved */
                200: {
                    content: {
                        "application/json": components["schemas"]["Audit"][];
                    };
                };
                500: components["responses"]["InternalError"];
            };
        };
    };
    "/consortia/{consortia_id}/environments/{environment_id}/configurations": {
        /** Get the configurations for an environment */
        get: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                    environment_id: components["parameters"]["environment_id"];
                };
            };
            responses: {
                /** @description Configurations Retrieved */
                200: {
                    content: {
                        "application/json": components["schemas"]["Configuration"][];
                    };
                };
                500: components["responses"]["InternalError"];
            };
        };
        /** Create a configurations for the environment */
        post: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                    environment_id: components["parameters"]["environment_id"];
                };
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["Configuration_Create_Input"];
                };
            };
            responses: {
                /** @description Configuration Updated */
                200: {
                    content: {
                        "application/json": components["schemas"]["Configuration"];
                    };
                };
                /** @description Configuration Created */
                201: {
                    content: {
                        "application/json": components["schemas"]["Configuration"];
                    };
                };
                /** @description Configuration Not Found */
                404: never;
                500: components["responses"]["InternalError"];
            };
        };
    };
    "/consortia/{consortia_id}/environments/{environment_id}/configurations/{config_id}": {
        /** Get a specific configuration */
        get: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                    environment_id: components["parameters"]["environment_id"];
                    config_id: components["parameters"]["config_id"];
                };
            };
            responses: {
                /** @description Configuration Retrieved */
                200: {
                    content: {
                        "application/json": components["schemas"]["Configuration"];
                    };
                };
                /** @description Configuration Not Found */
                404: never;
                500: components["responses"]["InternalError"];
            };
        };
        /** Upsert a specific configuration */
        put: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                    environment_id: components["parameters"]["environment_id"];
                    config_id: components["parameters"]["config_id"];
                };
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["Configuration"];
                };
            };
            responses: {
                /** @description Configuration Updated */
                200: {
                    content: {
                        "application/json": components["schemas"]["Configuration"];
                    };
                };
                /** @description Configuration Created */
                201: {
                    content: {
                        "application/json": components["schemas"]["Configuration"];
                    };
                };
                /** @description Configuration Not Found */
                404: never;
                500: components["responses"]["InternalError"];
            };
        };
        /** Delete a specific configuration */
        delete: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                    environment_id: components["parameters"]["environment_id"];
                    config_id: components["parameters"]["config_id"];
                };
            };
            responses: {
                /** @description Configuration Deleted */
                204: never;
                /** @description Configuration Not Found */
                404: never;
                500: components["responses"]["InternalError"];
            };
        };
        /** Update a specific configuration */
        patch: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                    environment_id: components["parameters"]["environment_id"];
                    config_id: components["parameters"]["config_id"];
                };
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["Configuration"];
                };
            };
            responses: {
                /** @description Configuration Updated */
                200: {
                    content: {
                        "application/json": components["schemas"]["Configuration"];
                    };
                };
                /** @description Configuration Created */
                201: {
                    content: {
                        "application/json": components["schemas"]["Configuration"];
                    };
                };
                /** @description Configuration Not Found */
                404: never;
                500: components["responses"]["InternalError"];
            };
        };
    };
    "/consortia": {
        /** Get all consortia */
        get: {
            responses: {
                /** @description Consortia Retrieved */
                200: {
                    content: {
                        "application/json": components["schemas"]["Consortia"][];
                    };
                };
                500: components["responses"]["InternalError"];
            };
        };
        /** Create a consortia */
        post: {
            requestBody: {
                content: {
                    "application/json": components["schemas"]["Consortia_Create_Input"];
                };
            };
            responses: {
                /** @description Consortia Updated */
                200: {
                    content: {
                        "application/json": components["schemas"]["Consortia"];
                    };
                };
                /** @description Consortia Created */
                201: {
                    content: {
                        "application/json": components["schemas"]["Consortia"];
                    };
                };
                /** @description Consortia Not Found */
                404: never;
                500: components["responses"]["InternalError"];
            };
        };
    };
    "/consortia/{consortia_id}": {
        /** Get a specific consortia */
        get: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                };
            };
            responses: {
                /** @description Consortia Retrieved */
                200: {
                    content: {
                        "application/json": components["schemas"]["Consortia"];
                    };
                };
                /** @description Consortia Not Found */
                404: never;
                500: components["responses"]["InternalError"];
            };
        };
        /** Delete a specific consortia */
        delete: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                };
            };
            responses: {
                /** @description Request Accepted */
                202: never;
                /** @description Consortia Not Found */
                404: never;
            };
        };
        /** Update a specific consortia */
        patch: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                };
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["Consortia_Update_Input"];
                };
            };
            responses: {
                /** @description Consortia Updated */
                200: {
                    content: {
                        "application/json": components["schemas"]["Consortia"];
                    };
                };
                /** @description Consortia Created */
                201: {
                    content: {
                        "application/json": components["schemas"]["Consortia"];
                    };
                };
                /** @description Consortia Not Found */
                404: never;
                500: components["responses"]["InternalError"];
            };
        };
    };
    "/consortia/{consortia_id}/charter": {
        /** Get the charter of a specific consortia */
        get: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                };
            };
            responses: {
                /** @description Consortia charter Retrieved */
                200: {
                    content: {
                        "application/json": components["schemas"]["Charter"];
                    };
                };
                /** @description Consortia charter Not Found */
                404: never;
                500: components["responses"]["InternalError"];
            };
        };
    };
    "/consortia/{consortia_id}/contracts": {
        /** Get all contracts for the consortia */
        get: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                };
            };
            responses: {
                /** @description Contracts Retrieved */
                200: {
                    content: {
                        "application/json": components["schemas"]["Contract"][];
                    };
                };
                500: components["responses"]["InternalError"];
            };
        };
        /** Create a contract for the consortia */
        post: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                };
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["Contract_Create_Input"];
                };
            };
            responses: {
                /** @description Contract Updated */
                200: {
                    content: {
                        "application/json": components["schemas"]["Contract"];
                    };
                };
                /** @description Contract Created */
                201: {
                    content: {
                        "application/json": components["schemas"]["Contract"];
                    };
                };
                /** @description Contract Not Found */
                404: never;
                500: components["responses"]["InternalError"];
            };
        };
    };
    "/consortia/{consortia_id}/contracts/{contract_id}": {
        /** Get a specific contract */
        get: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                    contract_id: components["parameters"]["contract_id"];
                };
            };
            responses: {
                /** @description Contract Retrieved */
                200: {
                    content: {
                        "application/json": components["schemas"]["Contract"];
                    };
                };
                /** @description Contract Not Found */
                404: never;
                500: components["responses"]["InternalError"];
            };
        };
        /** Delete a specific contract */
        delete: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                    contract_id: components["parameters"]["contract_id"];
                };
            };
            responses: {
                /** @description Contract Deleted */
                204: never;
                /** @description Contract Not Found */
                404: never;
                500: components["responses"]["InternalError"];
            };
        };
        /** Update a specific contract */
        patch: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                    contract_id: components["parameters"]["contract_id"];
                };
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["Contract_Update_Input"];
                };
            };
            responses: {
                /** @description Contract Updated */
                200: {
                    content: {
                        "application/json": components["schemas"]["Contract"];
                    };
                };
                /** @description Contract Created */
                201: {
                    content: {
                        "application/json": components["schemas"]["Contract"];
                    };
                };
                /** @description Contract Not Found */
                404: never;
                500: components["responses"]["InternalError"];
            };
        };
    };
    "/consortia/{consortia_id}/contracts/{contract_id}/compiled_contracts": {
        /** Get all compiled contracts for the consortia */
        get: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                    contract_id: components["parameters"]["contract_id"];
                };
            };
            responses: {
                /** @description Compiled Contracts Retrieved */
                200: {
                    content: {
                        "application/json": components["schemas"]["CompiledContract"][];
                    };
                };
                500: components["responses"]["InternalError"];
            };
        };
        /** Create a compiled contract for the consortia */
        post: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                    contract_id: components["parameters"]["contract_id"];
                };
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["CompiledContract_Create_Input"];
                    "multipart/form-data": components["schemas"]["CompiledContract_Create_Input_File"];
                };
            };
            responses: {
                /** @description Compiled Contract Updated */
                200: {
                    content: {
                        "application/json": components["schemas"]["CompiledContract"];
                    };
                };
                /** @description Compiled Contract Created */
                201: {
                    content: {
                        "application/json": components["schemas"]["CompiledContract"];
                    };
                };
                /** @description Contract Not Found */
                404: never;
                500: components["responses"]["InternalError"];
            };
        };
    };
    "/binaries/consortia/{consortia_id}/contracts/{contract_id}/compiled_contracts": {
        /** Create a compiled contract for the consortia by uploading a large file */
        post: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                    contract_id: components["parameters"]["contract_id"];
                };
            };
            requestBody: {
                content: {
                    "multipart/form-data": components["schemas"]["CompiledContract_Create_Input_File"];
                };
            };
            responses: {
                /** @description Compiled Contract Created */
                201: {
                    content: {
                        "application/json": components["schemas"]["CompiledContract"];
                    };
                };
                /** @description Contract Not Found */
                404: never;
                500: components["responses"]["InternalError"];
            };
        };
    };
    "/consortia/{consortia_id}/contracts/{contract_id}/compiled_contracts/{compiled_contract_id}": {
        /** Get a specific compiled contract */
        get: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                    contract_id: components["parameters"]["contract_id"];
                    compiled_contract_id: components["parameters"]["compiled_contract_id"];
                };
            };
            responses: {
                /** @description Compiled Contract Retrieved */
                200: {
                    content: {
                        "application/json": components["schemas"]["CompiledContract"];
                    };
                };
                /** @description Compiled Contract Not Found */
                404: never;
                500: components["responses"]["InternalError"];
            };
        };
        /** Delete a specific compiled contract */
        delete: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                    contract_id: components["parameters"]["contract_id"];
                    compiled_contract_id: components["parameters"]["compiled_contract_id"];
                };
            };
            responses: {
                /** @description Compiled Contract Deleted */
                204: never;
                /** @description Compiled Contract Not Found */
                404: never;
                500: components["responses"]["InternalError"];
            };
        };
        /** Update a specific compiled contract */
        patch: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                    contract_id: components["parameters"]["contract_id"];
                    compiled_contract_id: components["parameters"]["compiled_contract_id"];
                };
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["CompiledContract_Update_Input"];
                };
            };
            responses: {
                /** @description Compiled Contract Updated */
                200: {
                    content: {
                        "application/json": components["schemas"]["CompiledContract"];
                    };
                };
                /** @description Compiled Contract Created */
                201: {
                    content: {
                        "application/json": components["schemas"]["Contract"];
                    };
                };
                /** @description Compiled Contract Not Found */
                404: never;
                500: components["responses"]["InternalError"];
            };
        };
    };
    "/consortia/{consortia_id}/contracts/{contract_id}/compiled_contracts/{compiled_contract_id}/promote": {
        /** Promote the compiled contract to an environment. This will install a Gateway API on the environment which can be used to deploy new instances of this contract, as well as interact with previously deployed instances. */
        post: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                    contract_id: components["parameters"]["contract_id"];
                    compiled_contract_id: components["parameters"]["compiled_contract_id"];
                };
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["CompiledContract_Promote_Input"];
                };
            };
            responses: {
                /** @description CompiledContract Promoted */
                200: {
                    content: {
                        "application/json": Record<string, never>;
                    };
                };
                /** @description Compiled Contract Not Found */
                404: never;
                500: components["responses"]["InternalError"];
            };
        };
    };
    "/consortia/{consortia_id}/environments/{environment_id}/integrations": {
        /** Get all integrations for the environment */
        get: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                    environment_id: components["parameters"]["environment_id"];
                };
            };
            responses: {
                /** @description Integrations Retrieved */
                200: {
                    content: {
                        "application/json": components["schemas"]["Integration"][];
                    };
                };
                500: components["responses"]["InternalError"];
            };
        };
        /** Create an integration for the environment */
        post: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                    environment_id: components["parameters"]["environment_id"];
                };
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["Integration_Create_Input"];
                };
            };
            responses: {
                /** @description Integration Updated */
                200: {
                    content: {
                        "application/json": components["schemas"]["Integration"];
                    };
                };
                /** @description Integration Created */
                201: {
                    content: {
                        "application/json": components["schemas"]["Integration"];
                    };
                };
                /** @description Integration Not Found */
                404: never;
                500: components["responses"]["InternalError"];
            };
        };
    };
    "/consortia/{consortia_id}/environments/{environment_id}/integrations/{integration_id}": {
        /** Get a specific integration */
        get: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                    environment_id: components["parameters"]["environment_id"];
                    integration_id: components["parameters"]["integration_id"];
                };
            };
            responses: {
                /** @description Integration Retrieved */
                200: {
                    content: {
                        "application/json": components["schemas"]["Integration"];
                    };
                };
                /** @description Integration Not Found */
                404: never;
                500: components["responses"]["InternalError"];
            };
        };
        /** Delete a specific integration */
        delete: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                    environment_id: components["parameters"]["environment_id"];
                    integration_id: components["parameters"]["integration_id"];
                };
            };
            responses: {
                /** @description Request Accepted */
                202: never;
                /** @description Integration Not Found */
                404: never;
            };
        };
        /** Update a specific integration */
        patch: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                    environment_id: components["parameters"]["environment_id"];
                    integration_id: components["parameters"]["integration_id"];
                };
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["Integration"];
                };
            };
            responses: {
                /** @description Integration Updated */
                200: {
                    content: {
                        "application/json": components["schemas"]["Integration_Update_Input"];
                    };
                };
                /** @description Integration Not Found */
                404: never;
                500: components["responses"]["InternalError"];
            };
        };
    };
    "/consortia/{consortia_id}/environments/{environment_id}/integrations/{integration_id}/reset": {
        /** Reset the state of the integration by clearing out the tracking details and regenerating the app cred */
        post: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                    environment_id: components["parameters"]["environment_id"];
                    integration_id: components["parameters"]["integration_id"];
                };
            };
            responses: {
                /** @description Integration Updated */
                200: {
                    content: {
                        "application/json": components["schemas"]["Integration"];
                    };
                };
                /** @description Integration Created */
                201: {
                    content: {
                        "application/json": components["schemas"]["Integration"];
                    };
                };
                /** @description Integration Not Found */
                404: never;
                500: components["responses"]["InternalError"];
            };
        };
    };
    "/consortia/{consortia_id}/environments/{environment_id}/channels": {
        /** Get all channels in the environment (Fabric environments only) */
        get: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                    environment_id: components["parameters"]["environment_id"];
                };
            };
            responses: {
                /** @description Channels Retrieved */
                200: {
                    content: {
                        "application/json": components["schemas"]["Channel"][];
                    };
                };
                500: components["responses"]["InternalError"];
            };
        };
        /** Create a channel in the Fabric environment */
        post: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                    environment_id: components["parameters"]["environment_id"];
                };
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["Channel_Create_Input"];
                };
            };
            responses: {
                /** @description Channel Created */
                201: {
                    content: {
                        "application/json": components["schemas"]["Channel"];
                    };
                };
                /** @description Channel Not Found */
                404: never;
                500: components["responses"]["InternalError"];
            };
        };
    };
    "/consortia/{consortia_id}/environments/{environment_id}/channels/{channel_id}": {
        /** Get a specific channel */
        get: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                    environment_id: components["parameters"]["environment_id"];
                    channel_id: components["parameters"]["channel_id"];
                };
            };
            responses: {
                /** @description Channel Retrieved */
                200: {
                    content: {
                        "application/json": components["schemas"]["Channel"];
                    };
                };
                /** @description Channel Not Found */
                404: never;
                500: components["responses"]["InternalError"];
            };
        };
        /** Update a specific channel's members list */
        patch: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                    environment_id: components["parameters"]["environment_id"];
                    channel_id: components["parameters"]["channel_id"];
                };
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["Channel"];
                };
            };
            responses: {
                /** @description Channel Updated */
                200: {
                    content: {
                        "application/json": components["schemas"]["Channel_Update_Input"];
                    };
                };
                /** @description Channel Not Found */
                404: never;
                500: components["responses"]["InternalError"];
            };
        };
    };
    "/consortia/{consortia_id}/environments/{environment_id}/channels/{channel_id}/deploy": {
        /** Deploy chaincode to a channel */
        post: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                    environment_id: components["parameters"]["environment_id"];
                    channel_id: components["parameters"]["channel_id"];
                };
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["Chaincode_Deploy_Input"];
                };
            };
            responses: {
                /** @description Chaincode deploy request successful */
                200: {
                    content: {
                        "application/json": components["schemas"]["Channel"];
                    };
                };
            };
        };
    };
    "/invitations": {
        /** Get all invitations for the current user where they are the target */
        get: {
            responses: {
                /** @description Invitations Retrieved */
                200: {
                    content: {
                        "application/json": components["schemas"]["Invitation"][];
                    };
                };
                500: components["responses"]["InternalError"];
            };
        };
    };
    "/consortia/{consortia_id}/invitations": {
        /** Get all invitations for the consortia */
        get: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                };
            };
            responses: {
                /** @description Invitations Retrieved */
                200: {
                    content: {
                        "application/json": components["schemas"]["Invitation"][];
                    };
                };
                500: components["responses"]["InternalError"];
            };
        };
        /** Create an invitation for the consortia */
        post: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                };
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["Invitation_Create_Input"];
                };
            };
            responses: {
                /** @description Invitation Updated */
                200: {
                    content: {
                        "application/json": components["schemas"]["Invitation"];
                    };
                };
                /** @description Invitation Created */
                201: {
                    content: {
                        "application/json": components["schemas"]["Invitation"];
                    };
                };
                /** @description Invitation Not Found */
                404: never;
                500: components["responses"]["InternalError"];
            };
        };
    };
    "/consortia/{consortia_id}/invitations/{invitation_id}": {
        /** Get a specific invitation */
        get: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                    invitation_id: components["parameters"]["invitation_id"];
                };
            };
            responses: {
                /** @description Invitation Retrieved */
                200: {
                    content: {
                        "application/json": components["schemas"]["Invitation"];
                    };
                };
                /** @description Invitation Not Found */
                404: never;
                500: components["responses"]["InternalError"];
            };
        };
        /** Upsert a specific invitation */
        put: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                    invitation_id: components["parameters"]["invitation_id"];
                };
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["Invitation_Update_Input"];
                };
            };
            responses: {
                /** @description Invitation Updated */
                200: {
                    content: {
                        "application/json": components["schemas"]["Invitation"];
                    };
                };
                /** @description Invitation Created */
                201: {
                    content: {
                        "application/json": components["schemas"]["Invitation"];
                    };
                };
                /** @description Invitation Not Found */
                404: never;
                500: components["responses"]["InternalError"];
            };
        };
        /** Delete a specific invitation */
        delete: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                    invitation_id: components["parameters"]["invitation_id"];
                };
            };
            responses: {
                /** @description Invitation Deleted */
                204: never;
                /** @description Invitation Not Found */
                404: never;
                500: components["responses"]["InternalError"];
            };
        };
        /** Update a specific invitation */
        patch: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                    invitation_id: components["parameters"]["invitation_id"];
                };
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["Invitation_Update_Input"];
                };
            };
            responses: {
                /** @description Invitation Updated */
                200: {
                    content: {
                        "application/json": components["schemas"]["Invitation"];
                    };
                };
                /** @description Invitation Created */
                201: {
                    content: {
                        "application/json": components["schemas"]["Invitation"];
                    };
                };
                /** @description Invitation Not Found */
                404: never;
                500: components["responses"]["InternalError"];
            };
        };
    };
    "/consortia/{consortia_id}/invitations/{invitation_id}/charter": {
        /** Get a specific invitation with some extra info */
        get: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                    invitation_id: components["parameters"]["invitation_id"];
                };
            };
            responses: {
                /** @description Invitation Retrieved */
                200: {
                    content: {
                        "application/json": components["schemas"]["InvitationCharter"];
                    };
                };
                /** @description Invitation Not Found */
                404: never;
                500: components["responses"]["InternalError"];
            };
        };
    };
    "/consortia/{consortia_id}/zones": {
        /** Get all deployment zones for the consortia */
        get: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                };
            };
            responses: {
                /** @description Zones Retrieved */
                200: {
                    content: {
                        "application/json": components["schemas"]["Zone"][];
                    };
                };
                500: components["responses"]["InternalError"];
            };
        };
        /** Create a deployment zone for the consortia */
        post: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                };
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["Zone_Create_Input"];
                };
            };
            responses: {
                /** @description Zone Updated */
                200: {
                    content: {
                        "application/json": components["schemas"]["Zone"];
                    };
                };
                /** @description Zone Created */
                201: {
                    content: {
                        "application/json": components["schemas"]["Zone"];
                    };
                };
                /** @description Zone Not Found */
                404: never;
                500: components["responses"]["InternalError"];
            };
        };
    };
    "/consortia/{consortia_id}/zones/{zone_id}": {
        /** Get a specific consortia deployment zone */
        get: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                    zone_id: components["parameters"]["zone_id"];
                };
            };
            responses: {
                /** @description Zone Retrieved */
                200: {
                    content: {
                        "application/json": components["schemas"]["Zone"];
                    };
                };
                /** @description Zone Not Found */
                404: never;
                500: components["responses"]["InternalError"];
            };
        };
        /** Delete a specific consortia deployment zone */
        delete: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                    zone_id: components["parameters"]["zone_id"];
                };
            };
            responses: {
                /** @description Zone Deleted */
                204: never;
                /** @description Zone Not Found */
                404: never;
                500: components["responses"]["InternalError"];
            };
        };
        /** Update a specific consortia deployment zone */
        patch: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                    zone_id: components["parameters"]["zone_id"];
                };
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["Zone_Update_Input"];
                };
            };
            responses: {
                /** @description Zone Updated */
                200: {
                    content: {
                        "application/json": components["schemas"]["Zone"];
                    };
                };
                /** @description Zone Created */
                201: {
                    content: {
                        "application/json": components["schemas"]["Zone"];
                    };
                };
                /** @description Zone Not Found */
                404: never;
                500: components["responses"]["InternalError"];
            };
        };
    };
    "/consortia/{consortia_id}/environments": {
        /** Get all environments for the consortia */
        get: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                };
            };
            responses: {
                /** @description Environments Retrieved */
                200: {
                    content: {
                        "application/json": components["schemas"]["Environment"][];
                    };
                };
                500: components["responses"]["InternalError"];
            };
        };
        /** Create an environment for the consortia */
        post: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                };
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["Environment_Create_Input"];
                };
            };
            responses: {
                /** @description Environment Updated */
                200: {
                    content: {
                        "application/json": components["schemas"]["Environment"];
                    };
                };
                /** @description Environment Not Found */
                404: never;
                500: components["responses"]["InternalError"];
            };
        };
    };
    "/consortia/{consortia_id}/environments/{environment_id}": {
        /** Get a specific environment */
        get: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                    environment_id: components["parameters"]["environment_id"];
                };
            };
            responses: {
                /** @description Environment Retrieved */
                200: {
                    content: {
                        "application/json": components["schemas"]["Environment"];
                    };
                };
                /** @description Environment Not Found */
                404: never;
                500: components["responses"]["InternalError"];
            };
        };
        /** Delete a specific environment */
        delete: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                    environment_id: components["parameters"]["environment_id"];
                };
            };
            responses: {
                /** @description Request Accepted */
                202: never;
                /** @description Environment Not Found */
                404: never;
            };
        };
        /** Update a specific environment */
        patch: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                    environment_id: components["parameters"]["environment_id"];
                };
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["Environment_Update_Input"];
                };
            };
            responses: {
                /** @description Environment Updated */
                200: {
                    content: {
                        "application/json": components["schemas"]["Environment"];
                    };
                };
                /** @description Environment Created */
                201: {
                    content: {
                        "application/json": components["schemas"]["Environment"];
                    };
                };
                /** @description Environment Not Found */
                404: never;
                500: components["responses"]["InternalError"];
            };
        };
    };
    "/consortia/{consortia_id}/environments/{environment_id}/status": {
        /** Get an Environment's status */
        get: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                    environment_id: components["parameters"]["environment_id"];
                };
            };
            responses: {
                /** @description Environment Retrieved */
                200: {
                    content: {
                        "application/json": components["schemas"]["EnvironmentStatus"];
                    };
                };
                /** @description Environment Not Found */
                404: never;
                500: components["responses"]["InternalError"];
            };
        };
    };
    "/consortia/{consortia_id}/environments/{environment_id}/ethstats": {
        /**
         * Get an Environment's Ethereum-specific stats
         * @description Only applicable to Ethereum environments. Returns each node's transaction pool status, block height and p2p network peers
         */
        get: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                    environment_id: components["parameters"]["environment_id"];
                };
            };
            responses: {
                /** @description Environment Retrieved */
                200: {
                    content: {
                        "application/json": components["schemas"]["Eth_Stats"];
                    };
                };
                /** @description Environment Not Found */
                404: never;
                500: components["responses"]["InternalError"];
            };
        };
    };
    "/consortia/{consortia_id}/environments/{environment_id}/genesis": {
        /** Get an Environment's genesis configuration */
        get: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                    environment_id: components["parameters"]["environment_id"];
                };
            };
            responses: {
                /** @description Environment Retrieved */
                200: {
                    content: {
                        "application/json": Record<string, never>;
                    };
                };
                /** @description Environment Not Found */
                404: never;
                500: components["responses"]["InternalError"];
            };
        };
    };
    "/consortia/{consortia_id}/environments/{environment_id}/upgrade": {
        /** Upgrade a specific environment to the latest version */
        post: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                    environment_id: components["parameters"]["environment_id"];
                };
            };
            responses: {
                /** @description Environment Updated */
                200: {
                    content: {
                        "application/json": components["schemas"]["Environment"];
                    };
                };
                /** @description Environment Not Found */
                404: never;
                500: components["responses"]["InternalError"];
            };
        };
    };
    "/consortia/{consortia_id}/environments/{environment_id}/hardfork": {
        /** Apply available hard fork EIPs to a specific environment */
        post: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                    environment_id: components["parameters"]["environment_id"];
                };
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /**
                         * @description When set to true, upgrades environment to latest version and applies optional_hardfork_eips of the latest release
                         * @default false
                         */
                        hard_fork_with_upgrade?: boolean;
                    };
                };
            };
            responses: {
                /** @description Environment Updated */
                200: {
                    content: {
                        "application/json": components["schemas"]["Environment"];
                    };
                };
                /** @description Environment Not Found */
                404: never;
                500: components["responses"]["InternalError"];
            };
        };
    };
    "/consortia/{consortia_id}/environments/{environment_id}/eth/fundaccount": {
        /** Fund an account from the environment's faucet. Can transfer ETH or tokens owned by the faucet account. */
        post: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                    environment_id: components["parameters"]["environment_id"];
                };
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /**
                         * @description Type of fund to transfer. Can be `eth` or `token`
                         * @default eth
                         */
                        type?: string;
                        /** @description The Ethereum address to send funds to */
                        account?: string;
                        /** @description The amount to send */
                        amount?: string;
                        /**
                         * @description The unit of ether to send (ex. ether, qwei, wei, finney, etc.)
                         * @default ether
                         */
                        unit?: string;
                        /** @description The address of the token contract. Required if type is set to `token` */
                        tokenAddress?: string;
                    };
                };
            };
            responses: {
                /** @description Account Updated */
                200: {
                    content: {
                        "application/json": components["schemas"]["TransactionReceipt"];
                    };
                };
            };
        };
    };
    "/consortia/{consortia_id}/environments/{environment_id}/eth/getbalance/{address}": {
        /** Get ether balance of the account. */
        get: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                    environment_id: components["parameters"]["environment_id"];
                    address: components["parameters"]["address"];
                };
            };
            responses: {
                /** @description Account Balance */
                200: {
                    content: {
                        "application/json": components["schemas"]["Eth_Balance"];
                    };
                };
            };
        };
    };
    "/consortia/{consortia_id}/environments/{environment_id}/backup/status": {
        /**
         * Get an Environment's Backup Status
         * @description Only applicable to Ethereum environments that have Environment Backups enabled. Returns a record of history of all backup files for an environment.
         */
        get: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                    environment_id: components["parameters"]["environment_id"];
                };
            };
            responses: {
                /** @description Backup Status Retrieved */
                200: {
                    content: {
                        "application/json": components["schemas"]["Env_Backup_Status"];
                    };
                };
                /** @description Environment Backup Configuration Not Found */
                404: never;
                500: components["responses"]["InternalError"];
            };
        };
    };
    "/consortia/{consortia_id}/environments/{environment_id}/backup": {
        /** Get an Environment's Backup Configuration */
        get: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                    environment_id: components["parameters"]["environment_id"];
                };
            };
            responses: {
                /** @description Environment Backup Object Retrieved */
                200: {
                    content: {
                        "application/json": components["schemas"]["Env_Backup_Object"];
                    };
                };
                /** @description Environment Backup Configuration Not Found */
                404: never;
                500: components["responses"]["InternalError"];
            };
        };
        /** Create an Environment's Backup Configuration */
        post: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                    environment_id: components["parameters"]["environment_id"];
                };
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["Env_Backup_Input"];
                };
            };
            responses: {
                /** @description Environment Backup Object Created */
                200: {
                    content: {
                        "application/json": components["schemas"]["Env_Backup_Object"];
                    };
                };
                /** @description Environment Backup Configuration Not Found */
                404: never;
                500: components["responses"]["InternalError"];
            };
        };
        /** Delete a specific environment's backup configuration */
        delete: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                    environment_id: components["parameters"]["environment_id"];
                };
            };
            responses: {
                /** @description Request Accepted */
                204: never;
                /** @description Environment Backup Configuration Not Found */
                404: never;
                500: components["responses"]["InternalError"];
            };
        };
        /** Update an Environment's Backup Configuration */
        patch: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                    environment_id: components["parameters"]["environment_id"];
                };
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["Env_Backup_Input"];
                };
            };
            responses: {
                /** @description Environment Backup Object Updated */
                200: {
                    content: {
                        "application/json": components["schemas"]["Env_Backup_Object"];
                    };
                };
                /** @description Environment Backup Configuration Not Found */
                404: never;
                500: components["responses"]["InternalError"];
            };
        };
    };
    "/consortia/{consortia_id}/environments/{environment_id}/zones": {
        /** Get all deployment zones for the environment */
        get: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                    environment_id: components["parameters"]["environment_id"];
                };
            };
            responses: {
                /** @description Env Zone Retrieved */
                200: {
                    content: {
                        "application/json": components["schemas"]["EnvZone"][];
                    };
                };
                500: components["responses"]["InternalError"];
            };
        };
        /** Create a deployment zone for the environment */
        post: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                    environment_id: components["parameters"]["environment_id"];
                };
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["EnvZone_Create_Input"];
                };
            };
            responses: {
                /** @description Env Zone Updated */
                200: {
                    content: {
                        "application/json": components["schemas"]["EnvZone"];
                    };
                };
                /** @description Env Zone Created */
                201: {
                    content: {
                        "application/json": components["schemas"]["EnvZone"];
                    };
                };
                /** @description Env Zone Not Found */
                404: never;
                500: components["responses"]["InternalError"];
            };
        };
    };
    "/consortia/{consortia_id}/environments/{environment_id}/zones/{zone_id}": {
        /** Get a specific environment deployment zone */
        get: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                    environment_id: components["parameters"]["environment_id"];
                    zone_id: components["parameters"]["zone_id"];
                };
            };
            responses: {
                /** @description Env Zone Retrieved */
                200: {
                    content: {
                        "application/json": components["schemas"]["EnvZone"];
                    };
                };
                /** @description Env Zone Not Found */
                404: never;
                500: components["responses"]["InternalError"];
            };
        };
        /** Delete a specific environment deployment zone */
        delete: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                    environment_id: components["parameters"]["environment_id"];
                    zone_id: components["parameters"]["zone_id"];
                };
            };
            responses: {
                /** @description Env Zone Deleted */
                204: never;
                /** @description Env Zone Not Found */
                404: never;
                500: components["responses"]["InternalError"];
            };
        };
        /** Update a specific environment deployment zone */
        patch: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                    environment_id: components["parameters"]["environment_id"];
                    zone_id: components["parameters"]["zone_id"];
                };
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["EnvZone_Update_Input"];
                };
            };
            responses: {
                /** @description Env Zone Updated */
                200: {
                    content: {
                        "application/json": components["schemas"]["EnvZone"];
                    };
                };
                /** @description Env Zone Created */
                201: {
                    content: {
                        "application/json": components["schemas"]["EnvZone"];
                    };
                };
                /** @description Env Zone Not Found */
                404: never;
                500: components["responses"]["InternalError"];
            };
        };
    };
    "/orgs/{org_id}/idproofs": {
        /** Get all proofs of an organization */
        get: {
            parameters: {
                path: {
                    org_id: components["parameters"]["org_id"];
                };
            };
            responses: {
                /** @description Identity Proof Retrieved */
                200: {
                    content: {
                        "application/json": components["schemas"]["IdentityProof"][];
                    };
                };
                500: components["responses"]["InternalError"];
            };
        };
        /** Add an ID proof to an organization */
        post: {
            parameters: {
                path: {
                    org_id: components["parameters"]["org_id"];
                };
            };
            responses: {
                /** @description Identity Proof Updated */
                200: {
                    content: {
                        "application/json": components["schemas"]["IdentityProof"];
                    };
                };
                /** @description Identity Proof Created */
                201: {
                    content: {
                        "application/json": components["schemas"]["IdentityProof"];
                    };
                };
                /** @description Identity Proof Not Found */
                404: never;
                500: components["responses"]["InternalError"];
            };
        };
    };
    "/orgs/{org_id}/idproofs/{proof_id}": {
        /** Get a specific ID proof of an organization */
        get: {
            parameters: {
                path: {
                    org_id: components["parameters"]["org_id"];
                    proof_id: components["parameters"]["proof_id"];
                };
            };
            responses: {
                /** @description Identity Proof Retrieved */
                200: {
                    content: {
                        "application/json": components["schemas"]["IdentityProof"];
                    };
                };
                /** @description Identity Proof Not Found */
                404: never;
                500: components["responses"]["InternalError"];
            };
        };
        /** Remove an ID proof from an organization */
        delete: {
            parameters: {
                path: {
                    org_id: components["parameters"]["org_id"];
                    proof_id: components["parameters"]["proof_id"];
                };
            };
            responses: {
                /** @description Identity Proof Deleted */
                204: never;
                /** @description Identity Proof Not Found */
                404: never;
                500: components["responses"]["InternalError"];
            };
        };
        /** Update the details of an ID proof of an organization */
        patch: {
            parameters: {
                path: {
                    org_id: components["parameters"]["org_id"];
                    proof_id: components["parameters"]["proof_id"];
                };
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["IdentityProof_Update_Input"];
                };
            };
            responses: {
                /** @description Identity Proof Updated */
                200: {
                    content: {
                        "application/json": components["schemas"]["IdentityProof"];
                    };
                };
                /** @description Identity Proof Created */
                201: {
                    content: {
                        "application/json": components["schemas"]["IdentityProof"];
                    };
                };
                /** @description Identity Proof Not Found */
                404: never;
                500: components["responses"]["InternalError"];
            };
        };
    };
    "/ledger/{consortia_id}/{environment_id}/blocks": {
        /** Get a range of blocks in the chain */
        get: {
            parameters: {
                query: {
                    /** @description The number of blocks to skip, starting from the latest one */
                    start?: number;
                    /** @description The number of blocks to return (max of 25) */
                    limit?: number;
                };
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                    environment_id: components["parameters"]["environment_id"];
                };
            };
            responses: {
                /** @description Blocks Retrieved */
                200: {
                    content: {
                        "application/json": components["schemas"]["Block"][];
                    };
                };
                500: components["responses"]["InternalError"];
            };
        };
    };
    "/ledger/{consortia_id}/{environment_id}/blocks/{block_number}": {
        /** Get a specific block in the chain */
        get: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                    environment_id: components["parameters"]["environment_id"];
                    block_number: components["parameters"]["block_number"];
                };
            };
            responses: {
                /** @description Blocks Retrieved */
                200: {
                    content: {
                        "application/json": components["schemas"]["Block"];
                    };
                };
                500: components["responses"]["InternalError"];
            };
        };
    };
    "/ledger/{consortia_id}/{environment_id}/blocks/{block_number}/transactions": {
        /** Get the transactions in a specific block */
        get: {
            parameters: {
                query: {
                    /** @description The number of transactions to skip, starting from the latest one */
                    start?: number;
                    /** @description The number of transactions to return (max of 25) */
                    limit?: number;
                };
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                    environment_id: components["parameters"]["environment_id"];
                    block_number: components["parameters"]["block_number"];
                };
            };
            responses: {
                /** @description Transactions Retrieved */
                200: {
                    content: {
                        "application/json": components["schemas"]["Transaction"][];
                    };
                };
                500: components["responses"]["InternalError"];
            };
        };
    };
    "/ledger/{consortia_id}/{environment_id}/transactions": {
        /** Get the last 25 transactions from the ledger or lookup using the range parameters */
        get: {
            parameters: {
                query: {
                    /** @description The number of transactions to skip, starting from the last one */
                    start?: number;
                    /** @description The number of transactions to return */
                    limit?: number;
                };
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                    environment_id: components["parameters"]["environment_id"];
                };
            };
            responses: {
                /** @description Transactions Retrieved */
                200: {
                    content: {
                        "application/json": components["schemas"]["Transaction"][];
                    };
                };
                500: components["responses"]["InternalError"];
            };
        };
    };
    "/ledger/{consortia_id}/{environment_id}/transactions/{hash}": {
        /** Get information about a transaction */
        get: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                    environment_id: components["parameters"]["environment_id"];
                    hash: string;
                };
            };
            responses: {
                /** @description Transactions Retrieved */
                200: {
                    content: {
                        "application/json": components["schemas"]["Transaction"];
                    };
                };
                500: components["responses"]["InternalError"];
            };
        };
    };
    "/ledger/{consortia_id}/{environment_id}/transactions/{hash}/receipt": {
        /** Get the receipt of a specific transaction */
        get: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                    environment_id: components["parameters"]["environment_id"];
                    hash: string;
                };
            };
            responses: {
                /** @description Receipts Retrieved */
                200: {
                    content: {
                        "application/json": components["schemas"]["TransactionReceipt"];
                    };
                };
                500: components["responses"]["InternalError"];
            };
        };
    };
    "/ledger/{consortia_id}/{environment_id}/addresses/{address}": {
        /** Get a deployed contract's information */
        get: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                    environment_id: components["parameters"]["environment_id"];
                    address: components["parameters"]["address"];
                };
            };
            responses: {
                /** @description Contracts Retrieved */
                200: {
                    content: {
                        "application/json": components["schemas"]["DeployedContract"];
                    };
                };
                500: components["responses"]["InternalError"];
            };
        };
    };
    "/ledger/{consortia_id}/{environment_id}/addresses/{address}/transactions": {
        /** Get a deployed contract's transactions */
        get: {
            parameters: {
                query: {
                    /** @description The number of transactions to skip, starting from the latest one */
                    start?: number;
                    /** @description The number of transactions to return (max of 25) */
                    limit?: number;
                };
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                    environment_id: components["parameters"]["environment_id"];
                    address: components["parameters"]["address"];
                };
            };
            responses: {
                /** @description Transactions Retrieved */
                200: {
                    content: {
                        "application/json": components["schemas"]["Transaction"];
                    };
                };
                500: components["responses"]["InternalError"];
            };
        };
    };
    "/ledger/{consortia_id}/{environment_id}/contracts": {
        /** Get the contracts deployed on the chain */
        get: {
            parameters: {
                query: {
                    /** @description The number of contracts to skip, starting from the latest one */
                    start?: number;
                    /** @description The number of contracts to return (max of 25) */
                    limit?: number;
                };
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                    environment_id: components["parameters"]["environment_id"];
                };
            };
            responses: {
                /** @description Contracts Retrieved */
                200: {
                    content: {
                        "application/json": components["schemas"]["DeployedContract"][];
                    };
                };
                500: components["responses"]["InternalError"];
            };
        };
    };
    "/ledger/{consortia_id}/{environment_id}/contracts/{address}": {
        /** Get info about a specific deployed contract */
        get: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                    environment_id: components["parameters"]["environment_id"];
                    address: components["parameters"]["address"];
                };
            };
            responses: {
                /** @description Contracts Retrieved */
                200: {
                    content: {
                        "application/json": components["schemas"]["DeployedContract"];
                    };
                };
                500: components["responses"]["InternalError"];
            };
        };
        /** Update a specific contract's metadata */
        put: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                    environment_id: components["parameters"]["environment_id"];
                    address: components["parameters"]["address"];
                };
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["DeployedContract"];
                };
            };
            responses: {
                /** @description Contracts Retrieved */
                200: {
                    content: {
                        "application/json": components["schemas"]["DeployedContract"];
                    };
                };
                500: components["responses"]["InternalError"];
            };
        };
    };
    "/ledger/{consortia_id}/{environment_id}/gateway_apis": {
        /** Get the Gateway API's that have been promoted to this environment */
        get: {
            parameters: {
                query: {
                    /** @description The number of Gateway API's to skip, starting from the last one */
                    start?: number;
                    /** @description The number of Gateway API's to return (max of 25) */
                    limit?: number;
                };
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                    environment_id: components["parameters"]["environment_id"];
                };
            };
            responses: {
                /** @description Gateway API's Retrieved */
                200: {
                    content: {
                        "application/json": components["schemas"]["GatewayAPIWrapper"];
                    };
                };
                500: components["responses"]["InternalError"];
            };
        };
    };
    "/ledger/{consortia_id}/{environment_id}/gateway_apis/{gateway_api_id}": {
        /** Get info about a specific Gateway API */
        get: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                    environment_id: components["parameters"]["environment_id"];
                    gateway_api_id: components["parameters"]["gateway_api_id"];
                };
            };
            responses: {
                /** @description Gateway API Retrieved */
                200: {
                    content: {
                        "application/json": components["schemas"]["GatewayAPI"];
                    };
                };
                500: components["responses"]["InternalError"];
            };
        };
    };
    "/ledger/{consortia_id}/{environment_id}/gateway_apis/{gateway_api_id}/contracts": {
        /** Get all the deployed contract instances of a single Gateway API */
        get: {
            parameters: {
                query: {
                    /** @description The number of contracts to skip, starting from the last one */
                    start?: number;
                    /** @description The number of contracts to return (max of 25) */
                    limit?: number;
                };
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                    environment_id: components["parameters"]["environment_id"];
                    gateway_api_id: components["parameters"]["gateway_api_id"];
                };
            };
            responses: {
                /** @description Contracts Retrieved */
                200: {
                    content: {
                        "application/json": components["schemas"]["DeployedContractsWrapper"];
                    };
                };
                500: components["responses"]["InternalError"];
            };
        };
    };
    "/ledger/{consortia_id}/{environment_id}/tokens/contracts": {
        /** Get the token contracts deployed on the chain */
        get: {
            parameters: {
                query: {
                    /** @description The number of contracts to skip, starting from the last one */
                    start?: number;
                    /** @description The number of contracts to return (max of 25) */
                    limit?: number;
                };
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                    environment_id: components["parameters"]["environment_id"];
                };
            };
            responses: {
                /** @description Contracts Retrieved */
                200: {
                    content: {
                        "application/json": components["schemas"]["DeployedContract"][];
                    };
                };
                500: components["responses"]["InternalError"];
            };
        };
    };
    "/ledger/{consortia_id}/{environment_id}/tokens/contracts/{address}": {
        /** Get info about a specific deployed token contract */
        get: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                    environment_id: components["parameters"]["environment_id"];
                    address: components["parameters"]["address"];
                };
            };
            responses: {
                /** @description Contracts Retrieved */
                200: {
                    content: {
                        "application/json": components["schemas"]["DeployedContract"];
                    };
                };
                500: components["responses"]["InternalError"];
            };
        };
    };
    "/ledger/{consortia_id}/{environment_id}/tokens/contracts/{address}/balanceOf/{account}": {
        /** Get the balance of a particular account for a specific erc20 token contract */
        get: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                    environment_id: components["parameters"]["environment_id"];
                    address: components["parameters"]["address"];
                    account: components["parameters"]["account"];
                };
            };
            responses: {
                /** @description Balance retrieved */
                200: {
                    content: {
                        "application/json": {
                            /** @description The token balance */
                            balance?: string;
                        };
                    };
                };
                500: components["responses"]["InternalError"];
            };
        };
    };
    "/ledger/{consortia_id}/{environment_id}/tokens/contracts/{address}/ownerOf/{tokenId}": {
        /** Get the owner of a particular tokenId for a specific erc721 token contract */
        get: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                    environment_id: components["parameters"]["environment_id"];
                    address: components["parameters"]["address"];
                    tokenId: components["parameters"]["tokenId"];
                };
            };
            responses: {
                /** @description Owner retrieved */
                200: {
                    content: {
                        "application/json": {
                            /** @description The address of the owner */
                            address?: string;
                        };
                    };
                };
                500: components["responses"]["InternalError"];
            };
        };
    };
    "/ledger/{consortia_id}/{environment_id}/tokens/contracts/{address}/transfers": {
        /**
         * Get transfers of a token
         * @description Get transfer transactions for a specific token contract, with pagination and a limit of up to 25 records per query"
         */
        get: {
            parameters: {
                query: {
                    /** @description The number of transfer transactions to skip, starting from the latest one */
                    start?: number;
                    /** @description The number of transfer transactions to return (max of 25) */
                    limit?: number;
                };
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                    environment_id: components["parameters"]["environment_id"];
                    address: components["parameters"]["address"];
                };
            };
            responses: {
                /** @description Transfers Retrieved */
                200: {
                    content: {
                        "application/json": components["schemas"]["Transfers"];
                    };
                };
                500: components["responses"]["InternalError"];
            };
        };
    };
    "/ledger/{consortia_id}/{environment_id}/tokens/contracts/{address}/transfers/{wallet_address}": {
        /**
         * Get transfers of a token to/from a wallet address
         * @description Get transfer transactions to or from a particular wallet address for a specific token contract, with pagination and a limit of up to 25 records per query"
         */
        get: {
            parameters: {
                query: {
                    /** @description The number of transfer transactions to skip, starting from the latest one */
                    start?: number;
                    /** @description The number of transfer transactions to return (max of 25) */
                    limit?: number;
                };
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                    environment_id: components["parameters"]["environment_id"];
                    address: components["parameters"]["address"];
                    wallet_address: components["parameters"]["wallet_address"];
                };
            };
            responses: {
                /** @description Transfers Retrieved */
                200: {
                    content: {
                        "application/json": components["schemas"]["Transfers"];
                    };
                };
                500: components["responses"]["InternalError"];
            };
        };
    };
    "/ledger/{consortia_id}/{environment_id}/stats/{since}": {
        /** Get the ledger stats since a specific time */
        get: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                    environment_id: components["parameters"]["environment_id"];
                    since: string;
                };
            };
            responses: {
                /** @description Stats Retrieved */
                200: {
                    content: {
                        "application/json": components["schemas"]["Stats"];
                    };
                };
                500: components["responses"]["InternalError"];
            };
        };
    };
    "/ledger/{consortia_id}/{environment_id}/activity": {
        /** Gets last chain activity */
        get: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                    environment_id: components["parameters"]["environment_id"];
                };
            };
            responses: {
                /** @description Blocks Retrieved */
                200: {
                    content: {
                        "application/json": components["schemas"]["Block"][];
                    };
                };
                500: components["responses"]["InternalError"];
            };
        };
    };
    "/memberships": {
        /** Get all memberships for the current user */
        get: {
            responses: {
                /** @description Memberships Retrieved */
                200: {
                    content: {
                        "application/json": components["schemas"]["Membership"][];
                    };
                };
                500: components["responses"]["InternalError"];
            };
        };
    };
    "/consortia/{consortia_id}/memberships": {
        /** Get all memberships for the consortia */
        get: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                };
            };
            responses: {
                /** @description Memberships Retrieved */
                200: {
                    content: {
                        "application/json": components["schemas"]["Membership"][];
                    };
                };
                500: components["responses"]["InternalError"];
            };
        };
        /** Create a membership for the consortia */
        post: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                };
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["Membership_Create_Input"];
                };
            };
            responses: {
                /** @description Membership Updated */
                200: {
                    content: {
                        "application/json": components["schemas"]["Membership"];
                    };
                };
                /** @description Membership Created */
                201: {
                    content: {
                        "application/json": components["schemas"]["Membership"];
                    };
                };
                /** @description Membership Not Found */
                404: never;
                500: components["responses"]["InternalError"];
            };
        };
    };
    "/consortia/{consortia_id}/memberships/{membership_id}": {
        /** Get a specific membership */
        get: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                    membership_id: components["parameters"]["membership_id"];
                };
            };
            responses: {
                /** @description Membership Retrieved */
                200: {
                    content: {
                        "application/json": components["schemas"]["Membership"];
                    };
                };
                /** @description Membership Not Found */
                404: never;
                500: components["responses"]["InternalError"];
            };
        };
        /** Delete a specific membership */
        delete: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                    membership_id: components["parameters"]["membership_id"];
                };
            };
            responses: {
                /** @description Membership Deleted */
                204: never;
                /** @description Membership Not Found */
                404: never;
                500: components["responses"]["InternalError"];
            };
        };
        /** Update a specific membership */
        patch: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                    membership_id: components["parameters"]["membership_id"];
                };
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["Membership_Update_Input"];
                };
            };
            responses: {
                /** @description Membership Updated */
                200: {
                    content: {
                        "application/json": components["schemas"]["Membership"];
                    };
                };
                /** @description Membership Created */
                201: {
                    content: {
                        "application/json": components["schemas"]["Membership"];
                    };
                };
                /** @description Membership Not Found */
                404: never;
                500: components["responses"]["InternalError"];
            };
        };
    };
    "/consortia/{consortia_id}/memberships/{membership_id}/owner": {
        /** Get a specific membership's owner */
        get: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                    membership_id: components["parameters"]["membership_id"];
                };
            };
            responses: {
                /** @description Owner Retrieved */
                200: {
                    content: {
                        "application/json": components["schemas"]["Membership"] & {
                            /** @description Name of the membership owner */
                            owner?: string;
                            /** @description Email of the membership owner */
                            delegate_email?: string;
                        };
                    };
                };
                /** @description Membership Not Found */
                404: never;
                500: components["responses"]["InternalError"];
            };
        };
    };
    "/consortia/{consortia_id}/memberships/{membership_id}/idproof": {
        /** Get a specific membership's identity proof */
        get: {
            parameters: {
                query: {
                    /** @description Optional parameter to specify json input */
                    format?: string;
                };
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                    membership_id: components["parameters"]["membership_id"];
                };
            };
            responses: {
                /** @description Identity Proof Retrieved */
                200: {
                    content: {
                        "application/json": components["schemas"]["IdentityProof"];
                    };
                };
                /** @description Identity Proof Not Found */
                404: never;
                500: components["responses"]["InternalError"];
            };
        };
    };
    "/consortia/{consortia_id}/memberships/{membership_id}/verify": {
        /** Update the verification of a particular membership */
        post: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                    membership_id: components["parameters"]["membership_id"];
                };
            };
            requestBody?: {
                content: {
                    "application/json":
                        | components["schemas"]["ProofVerification"]
                        | components["schemas"]["ProofVerification_TestCertificate"];
                };
            };
            responses: {
                /** @description Membership Updated */
                200: {
                    content: {
                        "application/json": components["schemas"]["Membership"];
                    };
                };
                /** @description Membership Created */
                201: {
                    content: {
                        "application/json": components["schemas"]["Membership"];
                    };
                };
                /** @description Membership Not Found */
                404: never;
                /** @description Cannot modify membership verification once it has been set, or invalid proof */
                409: never;
                500: components["responses"]["InternalError"];
            };
        };
    };
    "/consortia/{consortia_id}/environments/{environment_id}/nodes": {
        /** Get all nodes for the environment */
        get: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                    environment_id: components["parameters"]["environment_id"];
                };
            };
            responses: {
                /** @description Nodes Retrieved */
                200: {
                    content: {
                        "application/json": components["schemas"]["Node"][];
                    };
                };
                500: components["responses"]["InternalError"];
            };
        };
        /** Create a node for the environment */
        post: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                    environment_id: components["parameters"]["environment_id"];
                };
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["Node_Create_Input"];
                };
            };
            responses: {
                /** @description Node Updated */
                200: {
                    content: {
                        "application/json": components["schemas"]["Node"];
                    };
                };
                /** @description Node Created */
                201: {
                    content: {
                        "application/json": components["schemas"]["Node"];
                    };
                };
                /** @description Node Not Found */
                404: never;
                500: components["responses"]["InternalError"];
            };
        };
    };
    "/consortia/{consortia_id}/environments/{environment_id}/nodes/{node_id}": {
        /** Get Node details */
        get: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                    environment_id: components["parameters"]["environment_id"];
                    node_id: components["parameters"]["node_id"];
                };
            };
            responses: {
                /** @description Node Retrieved */
                200: {
                    content: {
                        "application/json": components["schemas"]["Node"];
                    };
                };
                /** @description Node Not Found */
                404: never;
                500: components["responses"]["InternalError"];
            };
        };
        /** Delete a node */
        delete: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                    environment_id: components["parameters"]["environment_id"];
                    node_id: components["parameters"]["node_id"];
                };
            };
            responses: {
                /** @description Request Accepted */
                202: never;
                /** @description Node Not Found */
                404: never;
            };
        };
        /** Update a specific node */
        patch: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                    environment_id: components["parameters"]["environment_id"];
                    node_id: components["parameters"]["node_id"];
                };
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["Node_Update_Input"];
                };
            };
            responses: {
                /** @description Node Updated */
                200: {
                    content: {
                        "application/json": components["schemas"]["Node"];
                    };
                };
                /** @description Node Created */
                201: {
                    content: {
                        "application/json": components["schemas"]["Node"];
                    };
                };
                /** @description Node Not Found */
                404: never;
                500: components["responses"]["InternalError"];
            };
        };
    };
    "/consortia/{consortia_id}/environments/{environment_id}/nodes/{node_id}/status": {
        /**
         * Get Node's runtime status
         * @description Provides information about node's runtime, such as current block height, signer list, chain configuration, access URLs and more
         */
        get: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                    environment_id: components["parameters"]["environment_id"];
                    node_id: components["parameters"]["node_id"];
                };
            };
            responses: {
                /** @description Node Retrieved */
                200: {
                    content: {
                        "application/json":
                            | components["schemas"]["Node_Geth_POA"]
                            | components["schemas"]["Node_Quorum_IBFT"]
                            | components["schemas"]["Node_Quorum_Raft"]
                            | components["schemas"]["Node_Pantheon_POA"]
                            | components["schemas"]["Node_Pantheon_IBFT"]
                            | components["schemas"]["Node_Corda_Single_Notary"]
                            | components["schemas"]["Node_Fabric_Raft"];
                    };
                };
                /** @description Node Not Found */
                404: never;
                500: components["responses"]["InternalError"];
            };
        };
    };
    "/consortia/{consortia_id}/environments/{environment_id}/nodes/{node_id}/reset": {
        /**
         * Reset a node
         * @description Reset a node after modification to backup_id/kms_id/zone_id/node_config_id to apply any updated configuration. Does not affect chain data on the node
         */
        put: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                    environment_id: components["parameters"]["environment_id"];
                    node_id: components["parameters"]["node_id"];
                };
            };
            responses: {
                /** @description Node Reset Accepted */
                200: {
                    content: {
                        "application/json": components["schemas"]["Node"];
                    };
                };
                /** @description Node Not Found */
                404: never;
                500: components["responses"]["InternalError"];
            };
        };
    };
    "/consortia/{consortia_id}/environments/{environment_id}/nodes/{node_id}/restart": {
        /**
         * Restart a node
         * @description Restart a node's runtime
         */
        post: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                    environment_id: components["parameters"]["environment_id"];
                    node_id: components["parameters"]["node_id"];
                };
            };
            requestBody: {
                content: {
                    "application/json": Record<string, never>;
                };
            };
            responses: {
                /** @description Node Restart Accepted */
                204: {
                    content: {
                        "application/json": components["schemas"]["Node"];
                    };
                };
                /** @description Node Not Found */
                404: never;
                500: components["responses"]["InternalError"];
            };
        };
    };
    "/consortia/{consortia_id}/environments/{environment_id}/nodes/{node_id}/stop": {
        /**
         * Stop a running node
         * @description Stops a running node after voting it out of the signer list - available for POA & IBFT based environments
         */
        post: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                    environment_id: components["parameters"]["environment_id"];
                    node_id: components["parameters"]["node_id"];
                };
            };
            requestBody: {
                content: {
                    "application/json": Record<string, never>;
                };
            };
            responses: {
                /** @description Node Stop Accepted */
                204: {
                    content: {
                        "application/json": components["schemas"]["Node"];
                    };
                };
                /** @description Node Not Found */
                404: never;
                500: components["responses"]["InternalError"];
            };
        };
    };
    "/consortia/{consortia_id}/environments/{environment_id}/nodes/{node_id}/start": {
        /**
         * Start a Stopped node
         * @description Starts a stopped node, the node is started as a non-signer - available for POA & IBFT based environments
         */
        post: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                    environment_id: components["parameters"]["environment_id"];
                    node_id: components["parameters"]["node_id"];
                };
            };
            requestBody: {
                content: {
                    "application/json": Record<string, never>;
                };
            };
            responses: {
                /** @description Node Start Accepted */
                204: {
                    content: {
                        "application/json": components["schemas"]["Node"];
                    };
                };
                /** @description Node Not Found */
                404: never;
                500: components["responses"]["InternalError"];
            };
        };
    };
    "/consortia/{consortia_id}/environments/{environment_id}/nodes/{node_id}/eth/accounts": {
        /**
         * Create a Node Account
         * @description Creates a new account on a node and unlocks it so it's ready to use for signing transactions.
         */
        post: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                    environment_id: components["parameters"]["environment_id"];
                    node_id: components["parameters"]["node_id"];
                };
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /** @description A password to protect the new Ethereum account file */
                        password?: string;
                    };
                };
            };
            responses: {
                /** @description Node Updated */
                200: {
                    content: {
                        "application/json": {
                            /** @description The Ethereum address associated with the new account created on the node */
                            address?: string;
                        };
                    };
                };
            };
        };
    };
    "/consortia/{consortia_id}/environments/{environment_id}/nodes/{node_id}/logs/{log_type}": {
        /** Get a specific node's logs */
        get: {
            parameters: {
                query: {
                    /** @description The max number of lines to return (default 20) */
                    maxlines?: number;
                    /** @description The start position of the logs to return */
                    frompos?: number;
                };
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                    environment_id: components["parameters"]["environment_id"];
                    node_id: components["parameters"]["node_id"];
                    /**
                     * @description For a Geth node, use `geth` to access the blockchain node log. <br/>
                     * For a Quorum node, use `geth` to access the blockchain node log, use `constellation` to access the
                     * Tessera private transaction manager log. <br/>
                     * For a Hyperledger Besu node, use `pantheon` to access the blockchain node log, use `orion` to access the private
                     * transaction manager log, use `ethsigner` to access the signing wallet log. <br/>
                     * For any node, use `ethconnect` to access the REST API Gateway log, use `baf` to access the Blockchain Application Firewall log.
                     */
                    log_type:
                        | "geth"
                        | "constellation"
                        | "pantheon"
                        | "ethsigner"
                        | "orion"
                        | "ethconnect"
                        | "baf";
                };
            };
            responses: {
                /** @description Logs Retrieved */
                200: {
                    content: {
                        "application/json": string[];
                    };
                };
                /** @description Node Not Found */
                404: never;
                500: components["responses"]["InternalError"];
            };
        };
    };
    "/consortia/{consortia_id}/environments/{environment_id}/nodes/{node_id}/backup": {
        /**
         * Backup a Node's /qdata
         * @description Backup a Node's /qdata content to the attached backup store (AWS S3 bucket or Azure Storage Blob)
         */
        put: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                    environment_id: components["parameters"]["environment_id"];
                    node_id: components["parameters"]["node_id"];
                };
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["Backup_Input"];
                };
            };
            responses: {
                /** @description Request Accepted */
                202: never;
            };
        };
    };
    "/consortia/{consortia_id}/environments/{environment_id}/nodes/{node_id}/txpool/status": {
        /**
         * Transaction pool summary
         * @description Get a summary of the nodes's transaction pool contents
         */
        get: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                    environment_id: components["parameters"]["environment_id"];
                    node_id: components["parameters"]["node_id"];
                };
            };
            responses: {
                /** @description Transaction Pool Summary */
                200: {
                    content: {
                        "application/json": {
                            /** @description Count of pending transactions ready for execution in of the transaction pool */
                            pending?: string;
                            /** @description Count of queue transactions, waiting for nonce gaps to be filled before they can be executed */
                            queued?: string;
                        };
                    };
                };
            };
        };
    };
    "/consortia/{consortia_id}/environments/{environment_id}/nodes/{node_id}/txpool/content": {
        /**
         * Transaction pool contents
         * @description Get details of the nodes's transaction pool contents
         */
        get: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                    environment_id: components["parameters"]["environment_id"];
                    node_id: components["parameters"]["node_id"];
                };
            };
            responses: {
                /** @description Transaction Pool Contents */
                200: {
                    content: {
                        "application/json": {
                            /**
                             * @description See <a href="https://github.com/ethereum/go-ethereum/wiki/Management-APIs#txpool_content">Management APIs</a>
                             * in the go-ethereum documentation for details of the JSON payload
                             */
                            pending?: Record<string, never>;
                            /**
                             * @description See <a href="https://github.com/ethereum/go-ethereum/wiki/Management-APIs#txpool_content">Management APIs</a>
                             * in the go-ethereum documentation for details of the JSON payload
                             */
                            queued?: Record<string, never>;
                        };
                    };
                };
            };
        };
    };
    "/consortia/{consortia_id}/environments/{environment_id}/oauth": {
        /** Get the OAuth Configurations of a particular environment */
        get: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                    environment_id: components["parameters"]["environment_id"];
                };
            };
            responses: {
                /** @description OAuth Configurations Retrieved */
                200: {
                    content: {
                        "application/json": components["schemas"]["OauthConfig"][];
                    };
                };
                500: components["responses"]["InternalError"];
            };
        };
        /** Create new OAuth Configurations */
        post: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                    environment_id: components["parameters"]["environment_id"];
                };
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["OauthConfig"];
                };
            };
            responses: {
                /** @description OAuth Resource Manager configuration Updated */
                200: {
                    content: {
                        "application/json": components["schemas"]["OauthConfig"];
                    };
                };
                /** @description OAuth Resource Manager configuration Created */
                201: {
                    content: {
                        "application/json": components["schemas"]["OauthConfig"];
                    };
                };
                404: components["responses"]["NotFound"];
                500: components["responses"]["InternalError"];
            };
        };
    };
    "/consortia/{consortia_id}/environments/{environment_id}/oauth/{oauth_id}": {
        /** Get a specific OAuth Resource Manager configuration */
        get: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                    environment_id: components["parameters"]["environment_id"];
                    oauth_id: components["parameters"]["oauth_id"];
                };
            };
            responses: {
                /** @description OAuth Resource Manager configuration Retrieved */
                200: {
                    content: {
                        "application/json": components["schemas"]["OauthConfig"];
                    };
                };
                /** @description OAuth Resource Manager configuration Not Found */
                404: never;
                500: components["responses"]["InternalError"];
            };
        };
        /** Upsert a specific OAuth Resource Manager configuration */
        put: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                    environment_id: components["parameters"]["environment_id"];
                    oauth_id: components["parameters"]["oauth_id"];
                };
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["OauthConfig"];
                };
            };
            responses: {
                /** @description OAuth Resource Manager configuration Updated */
                200: {
                    content: {
                        "application/json": components["schemas"]["OauthConfig"];
                    };
                };
                /** @description OAuth Resource Manager configuration Created */
                201: {
                    content: {
                        "application/json": components["schemas"]["OauthConfig"];
                    };
                };
                /** @description OAuth Resource Manager configuration Not Found */
                404: never;
                500: components["responses"]["InternalError"];
            };
        };
        /** Delete an OAuth Resource Manager configuration */
        delete: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                    environment_id: components["parameters"]["environment_id"];
                    oauth_id: components["parameters"]["oauth_id"];
                };
            };
            responses: {
                /** @description OAuth Resource Manager configuration Deleted */
                204: never;
                /** @description OAuth Resource Manager configuration Not Found */
                404: never;
                500: components["responses"]["InternalError"];
            };
        };
        /** Update a specific OAuth Resource Manager configuration */
        patch: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                    environment_id: components["parameters"]["environment_id"];
                    oauth_id: components["parameters"]["oauth_id"];
                };
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["OauthConfig"];
                };
            };
            responses: {
                /** @description OAuth Resource Manager configuration Updated */
                200: {
                    content: {
                        "application/json": components["schemas"]["OauthConfig"];
                    };
                };
                /** @description OAuth Resource Manager configuration Created */
                201: {
                    content: {
                        "application/json": components["schemas"]["OauthConfig"];
                    };
                };
                /** @description OAuth Resource Manager configuration Not Found */
                404: never;
                500: components["responses"]["InternalError"];
            };
        };
    };
    "/orgs": {
        /** Get the Organizations that user has access to */
        get: {
            responses: {
                /** @description Organizations Retrieved */
                200: {
                    content: {
                        "application/json": components["schemas"]["Organization"][];
                    };
                };
                500: components["responses"]["InternalError"];
            };
        };
        /** Create a new Organization */
        post: {
            requestBody: {
                content: {
                    "application/json": components["schemas"]["Organization_Create_Input"];
                };
            };
            responses: {
                /** @description Organization Created */
                201: {
                    content: {
                        "application/json": components["schemas"]["Organization"];
                    };
                };
                /** @description Organization Not Found */
                404: never;
                500: components["responses"]["InternalError"];
            };
        };
    };
    "/orgs/{org_id}": {
        /** Get a specific Organization */
        get: {
            parameters: {
                path: {
                    org_id: components["parameters"]["org_id"];
                };
            };
            responses: {
                /** @description Organization Retrieved */
                200: {
                    content: {
                        "application/json": components["schemas"]["Organization"];
                    };
                };
                /** @description Organization Not Found */
                404: never;
                500: components["responses"]["InternalError"];
            };
        };
        /** Delete a specific Organization */
        delete: {
            parameters: {
                path: {
                    org_id: components["parameters"]["org_id"];
                };
            };
            responses: {
                /** @description Organization Deleted */
                204: never;
                /** @description Organization Not Found */
                404: never;
                500: components["responses"]["InternalError"];
            };
        };
        /** Update a specific Organization */
        patch: {
            parameters: {
                path: {
                    org_id: components["parameters"]["org_id"];
                };
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["Organization_Update_Input"];
                };
            };
            responses: {
                /** @description Organization Updated */
                200: {
                    content: {
                        "application/json": components["schemas"]["Organization"];
                    };
                };
                /** @description Organization Created */
                201: {
                    content: {
                        "application/json": components["schemas"]["Organization"];
                    };
                };
                /** @description Organization Not Found */
                404: never;
                500: components["responses"]["InternalError"];
            };
        };
    };
    "/orgs/{org_id}/plan": {
        /** Get the plan for a specific Organization */
        get: {
            parameters: {
                path: {
                    org_id: components["parameters"]["org_id"];
                };
            };
            responses: {
                /** @description Organization Retrieved */
                200: {
                    content: {
                        "application/json": components["schemas"]["Plan_ResourceLimits"] & {
                            /** @description name of the plan */
                            plan?: string;
                            waitlisted?: boolean;
                        };
                    };
                };
                /** @description Organization Not Found */
                404: never;
                500: components["responses"]["InternalError"];
            };
        };
    };
    "/orgs/{org_id}/billing/summary": {
        /** Get a summary of the billing data for the current month. */
        get: {
            parameters: {
                query: {
                    /** @description the month - january,february etc. Default=current */
                    month?: string;
                    /** @description 2018 etc. */
                    year?: string;
                };
                path: {
                    org_id: components["parameters"]["org_id"];
                };
            };
            responses: {
                /** @description Plan Retrieved */
                200: {
                    content: {
                        "application/json": components["schemas"]["BillingSummary"];
                    };
                };
                /** @description Plan Not Found */
                404: never;
                500: components["responses"]["InternalError"];
            };
        };
    };
    "/orgs/{org_id}/billing/provider": {
        /** Returns type of billing (aws, stripe or other) and details if using stripe */
        get: {
            parameters: {
                path: {
                    org_id: components["parameters"]["org_id"];
                };
            };
            responses: {
                /** @description Organization Retrieved */
                200: {
                    content: {
                        "application/json": components["schemas"]["Billing_Output"];
                    };
                };
                /** @description Organization Not Found */
                404: never;
                500: components["responses"]["InternalError"];
            };
        };
        /** Configures billing provider for the organization */
        put: {
            parameters: {
                path: {
                    org_id: components["parameters"]["org_id"];
                };
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["Billing_Input"];
                };
            };
            responses: {
                /** @description Organization Updated */
                200: {
                    content: {
                        "application/json": components["schemas"]["Billing_Output"];
                    };
                };
                /** @description Organization Created */
                201: {
                    content: {
                        "application/json": components["schemas"]["Billing_Output"];
                    };
                };
                /** @description Organization Not Found */
                404: never;
                500: components["responses"]["InternalError"];
            };
        };
    };
    "/plans": {
        /** Get all available plans */
        get: {
            responses: {
                /** @description Plans Retrieved */
                200: {
                    content: {
                        "application/json": components["schemas"]["Plan"][];
                    };
                };
                500: components["responses"]["InternalError"];
            };
        };
    };
    "/plancompliance/{org_id}": {
        /** Determine compliance with all available plans, to find resources that would prevent changing your subscription */
        get: {
            parameters: {
                path: {
                    org_id: components["parameters"]["org_id"];
                };
            };
            responses: {
                /** @description Plan Retrieved */
                200: {
                    content: {
                        "application/json": {
                            starter?: components["schemas"]["Compliance_Starter"];
                            team?: components["schemas"]["Compliance_Team"];
                            business?: components["schemas"]["Compliance_Business_Enterprise"];
                            enterprise?: components["schemas"]["Compliance_Business_Enterprise"];
                        };
                    };
                };
                /** @description Plan Not Found */
                404: never;
                500: components["responses"]["InternalError"];
            };
        };
    };
    "/regions": {
        /** List of API endpoints and their associated deployment zones */
        get: {
            responses: {
                /** @description Region Retrieved */
                200: {
                    content: {
                        "application/json": components["schemas"]["Region"];
                    };
                };
                /** @description Region Not Found */
                404: never;
                500: components["responses"]["InternalError"];
            };
        };
    };
    "/releases": {
        /** Get current list of environment runtime releases */
        get: {
            responses: {
                /** @description Releases Retrieved */
                200: {
                    content: {
                        "application/json": components["schemas"]["Release"][];
                    };
                };
                500: components["responses"]["InternalError"];
            };
        };
    };
    "/releases/{release_id}": {
        /** Get a specific environment runtime release */
        get: {
            parameters: {
                path: {
                    release_id: string;
                };
            };
            responses: {
                /** @description Release Retrieved */
                200: {
                    content: {
                        "application/json": components["schemas"]["Release"];
                    };
                };
                /** @description Release Not Found */
                404: never;
                500: components["responses"]["InternalError"];
            };
        };
    };
    "/orgs/{org_id}/roles": {
        /** Get all roles of an Organization */
        get: {
            parameters: {
                path: {
                    org_id: components["parameters"]["org_id"];
                };
            };
            responses: {
                /** @description Roles Retrieved */
                200: {
                    content: {
                        "application/json": components["schemas"]["Role"][];
                    };
                };
                500: components["responses"]["InternalError"];
            };
        };
        /** Add a role to an Organization */
        post: {
            parameters: {
                path: {
                    org_id: components["parameters"]["org_id"];
                };
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["Role_Create_Input"];
                };
            };
            responses: {
                /** @description Role Updated */
                200: {
                    content: {
                        "application/json": components["schemas"]["Role"];
                    };
                };
                /** @description Role Created */
                201: {
                    content: {
                        "application/json": components["schemas"]["Role"];
                    };
                };
                /** @description Role Not Found */
                404: never;
                500: components["responses"]["InternalError"];
            };
        };
    };
    "/orgs/{org_id}/roles/{role_id}": {
        /** Get a specific role of an Organization */
        get: {
            parameters: {
                path: {
                    org_id: components["parameters"]["org_id"];
                    role_id: components["parameters"]["role_id"];
                };
            };
            responses: {
                /** @description Role Retrieved */
                200: {
                    content: {
                        "application/json": components["schemas"]["Role"];
                    };
                };
                /** @description Role Not Found */
                404: never;
                500: components["responses"]["InternalError"];
            };
        };
        /** Upsert a role of an Organization */
        put: {
            parameters: {
                path: {
                    org_id: components["parameters"]["org_id"];
                    role_id: components["parameters"]["role_id"];
                };
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["Role_Update_Input"];
                };
            };
            responses: {
                /** @description Role Updated */
                200: {
                    content: {
                        "application/json": components["schemas"]["Role"];
                    };
                };
                /** @description Role Created */
                201: {
                    content: {
                        "application/json": components["schemas"]["Role"];
                    };
                };
                /** @description Role Not Found */
                404: never;
                500: components["responses"]["InternalError"];
            };
        };
        /** Remove a role from an Organization */
        delete: {
            parameters: {
                path: {
                    org_id: components["parameters"]["org_id"];
                    role_id: components["parameters"]["role_id"];
                };
            };
            responses: {
                /** @description Role Deleted */
                204: never;
                /** @description Role Not Found */
                404: never;
                500: components["responses"]["InternalError"];
            };
        };
        /** Update the details of a role of an Organization */
        patch: {
            parameters: {
                path: {
                    org_id: components["parameters"]["org_id"];
                    role_id: components["parameters"]["role_id"];
                };
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["Role_Update_Input"];
                };
            };
            responses: {
                /** @description Role Updated */
                200: {
                    content: {
                        "application/json": components["schemas"]["Role"];
                    };
                };
                /** @description Role Created */
                201: {
                    content: {
                        "application/json": components["schemas"]["Role"];
                    };
                };
                /** @description Role Not Found */
                404: never;
                500: components["responses"]["InternalError"];
            };
        };
    };
    "/services": {
        /** Retrieves all services that the current user owns or has visibility of */
        get: {
            responses: {
                /** @description Services Retrieved */
                200: {
                    content: {
                        "application/json": components["schemas"]["Service"][];
                    };
                };
                500: components["responses"]["InternalError"];
            };
        };
    };
    "/consortia/{consortia_id}/environments/{environment_id}/services": {
        /** Get all services for the environment */
        get: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                    environment_id: components["parameters"]["environment_id"];
                };
            };
            responses: {
                /** @description Services Retrieved */
                200: {
                    content: {
                        "application/json": components["schemas"]["Service"][];
                    };
                };
                500: components["responses"]["InternalError"];
            };
        };
        /** Create a service for the environment */
        post: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                    environment_id: components["parameters"]["environment_id"];
                };
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["Service_Create_Input"];
                };
            };
            responses: {
                /** @description Service Updated */
                200: {
                    content: {
                        "application/json": components["schemas"]["Service"];
                    };
                };
                /** @description Service Created */
                201: {
                    content: {
                        "application/json": components["schemas"]["Service"];
                    };
                };
                /** @description Service Not Found */
                404: never;
                500: components["responses"]["InternalError"];
            };
        };
    };
    "/consortia/{consortia_id}/environments/{environment_id}/services/{service_id}": {
        /** Get a specific service */
        get: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                    environment_id: components["parameters"]["environment_id"];
                    service_id: components["parameters"]["service_id"];
                };
            };
            responses: {
                /** @description Service Retrieved */
                200: {
                    content: {
                        "application/json": components["schemas"]["Service"];
                    };
                };
                /** @description Service Not Found */
                404: never;
                500: components["responses"]["InternalError"];
            };
        };
        /** Delete a specific service */
        delete: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                    environment_id: components["parameters"]["environment_id"];
                    service_id: components["parameters"]["service_id"];
                };
            };
            responses: {
                /** @description Request Accepted */
                202: never;
                /** @description Service Not Found */
                404: never;
            };
        };
        /** Update a specific service */
        patch: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                    environment_id: components["parameters"]["environment_id"];
                    service_id: components["parameters"]["service_id"];
                };
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["Service_Update_Input"];
                };
            };
            responses: {
                /** @description Service Updated */
                200: {
                    content: {
                        "application/json": components["schemas"]["Service"];
                    };
                };
                /** @description Service Created */
                201: {
                    content: {
                        "application/json": components["schemas"]["Service"];
                    };
                };
                /** @description Service Not Found */
                404: never;
                500: components["responses"]["InternalError"];
            };
        };
    };
    "/consortia/{consortia_id}/environments/{environment_id}/services/{service_id}/status": {
        /** Get a specific service's status */
        get: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                    environment_id: components["parameters"]["environment_id"];
                    service_id: components["parameters"]["service_id"];
                };
            };
            responses: {
                /** @description Service Retrieved */
                200: {
                    content: {
                        "application/json": {
                            /** @description Auto-populated set of service specific URLs for communicating with the service. */
                            urls?: {
                                [key: string]: string | undefined;
                            };
                            /**
                             * @description The status of the service.
                             * @enum {string}
                             */
                            status?:
                                | "provisioning"
                                | "failed"
                                | "started"
                                | "paused"
                                | "upgrading"
                                | "deprovisioning"
                                | "delete_failed";
                            /** @description The release version of this service */
                            release?: string;
                        };
                    };
                };
                /** @description Service Not Found */
                404: never;
                500: components["responses"]["InternalError"];
            };
        };
    };
    "/consortia/{consortia_id}/environments/{environment_id}/services/{service_id}/logs": {
        /** Get a specific service's logs list */
        get: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                    environment_id: components["parameters"]["environment_id"];
                    service_id: components["parameters"]["service_id"];
                };
            };
            responses: {
                /** @description Service Retrieved */
                200: {
                    content: {
                        "application/json": string[];
                    };
                };
                /** @description Service Not Found */
                404: never;
                500: components["responses"]["InternalError"];
            };
        };
    };
    "/consortia/{consortia_id}/environments/{environment_id}/services/{service_id}/logs/{log_name}": {
        /** Get a specific service particular log */
        get: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                    environment_id: components["parameters"]["environment_id"];
                    service_id: components["parameters"]["service_id"];
                    log_name: string;
                };
            };
            responses: {
                /** @description Service Retrieved */
                200: {
                    content: {
                        "application/json": string[];
                    };
                };
                /** @description Service Not Found */
                404: never;
                500: components["responses"]["InternalError"];
            };
        };
    };
    "/consortia/{consortia_id}/environments/{environment_id}/services/{service_id}/backup": {
        /**
         * Backup a Service's /qdata
         * @description Backup a Service's /qdata content to the attached backup store (AWS S3 bucket or Azure Storage Blob)
         */
        put: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                    environment_id: components["parameters"]["environment_id"];
                    service_id: components["parameters"]["service_id"];
                };
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["Backup_Input"];
                };
            };
            responses: {
                /** @description Request Accepted */
                202: never;
            };
        };
    };
    "/consortia/{consortia_id}/memberships/{membership_id}/tenants": {
        /** Get the Tenants of a particular environment */
        get: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                    membership_id: components["parameters"]["membership_id"];
                };
            };
            responses: {
                /** @description Tenants Retrieved */
                200: {
                    content: {
                        "application/json": components["schemas"]["Tenant"][];
                    };
                };
                500: components["responses"]["InternalError"];
            };
        };
        /** Create new Tenants */
        post: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                    membership_id: components["parameters"]["membership_id"];
                };
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["Tenant"];
                };
            };
            responses: {
                /** @description Tenant Updated */
                200: {
                    content: {
                        "application/json": components["schemas"]["Tenant"];
                    };
                };
                /** @description Tenant Created */
                201: {
                    content: {
                        "application/json": components["schemas"]["Tenant"];
                    };
                };
                404: components["responses"]["NotFound"];
                500: components["responses"]["InternalError"];
            };
        };
    };
    "/consortia/{consortia_id}/memberships/{membership_id}/tenants/{tenant_id}": {
        /** Get a specific Tenant */
        get: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                    membership_id: components["parameters"]["membership_id"];
                    tenant_id: components["parameters"]["tenant_id"];
                };
            };
            responses: {
                /** @description Tenant Retrieved */
                200: {
                    content: {
                        "application/json": components["schemas"]["Tenant"];
                    };
                };
                /** @description Tenant Not Found */
                404: never;
                500: components["responses"]["InternalError"];
            };
        };
        /** Upsert a specific Tenant */
        put: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                    membership_id: components["parameters"]["membership_id"];
                    tenant_id: components["parameters"]["tenant_id"];
                };
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["Tenant"];
                };
            };
            responses: {
                /** @description Tenant Updated */
                200: {
                    content: {
                        "application/json": components["schemas"]["Tenant"];
                    };
                };
                /** @description Tenant Created */
                201: {
                    content: {
                        "application/json": components["schemas"]["Tenant"];
                    };
                };
                /** @description Tenant Not Found */
                404: never;
                500: components["responses"]["InternalError"];
            };
        };
        /** Delete a Tenant */
        delete: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                    membership_id: components["parameters"]["membership_id"];
                    tenant_id: components["parameters"]["tenant_id"];
                };
            };
            responses: {
                /** @description Tenant Deleted */
                204: never;
                /** @description Tenant Not Found */
                404: never;
                500: components["responses"]["InternalError"];
            };
        };
        /** Update a specific Tenant */
        patch: {
            parameters: {
                path: {
                    consortia_id: components["parameters"]["consortia_id"];
                    membership_id: components["parameters"]["membership_id"];
                    tenant_id: components["parameters"]["tenant_id"];
                };
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["Tenant"];
                };
            };
            responses: {
                /** @description Tenant Updated */
                200: {
                    content: {
                        "application/json": components["schemas"]["Tenant"];
                    };
                };
                /** @description Tenant Created */
                201: {
                    content: {
                        "application/json": components["schemas"]["Tenant"];
                    };
                };
                /** @description Tenant Not Found */
                404: never;
                500: components["responses"]["InternalError"];
            };
        };
    };
}

export type webhooks = Record<string, never>;

export interface components {
    schemas: {
        Error: {
            errorMessage?: string;
        };
        MongoResource: {
            _id?: string;
            _revision?: string;
            /** @description Auto-populated field denoting when a record is created */
            created_at?: string;
            /** @description Auto-populated field denoting when a record is updated */
            updated_at?: string;
        };
        APIKey_Update_Input: {
            /** @description User defined name for API Key */
            name?: string;
        };
        APIKey_Create_Input: {
            /** @description User defined name for API Key */
            name?: string;
            org_id: string;
        };
        APIKey: components["schemas"]["MongoResource"] &
            components["schemas"]["APIKey_Create_Input"];
        ApplicationCredential: components["schemas"]["MongoResource"] & {
            /** @description Auto-generated key for the environment that owns this key */
            environment_id?: string;
            /** @description Auto-generated key for the membership that owns this key */
            membership_id?: string;
            /** @description The DApp that owns this Key */
            dapp_id?: string;
            /** @description User defined name for App Key */
            name?: string;
            /**
             * @description The type of authentication associated with this key
             * @enum {string}
             */
            auth_type?: "app_creds";
            /** @description Internal storage used to validate an key (we do not store the whole key) */
            hash?: string;
            /** @description Auto-populated field. Indicates this app credential is used by provisioned service instances running in Kaleido to connect to the chain. */
            service_id?: string;
            /** @description Auto-populated field. Indicates this app credential is used by partner integrations to connect to the chain. */
            integration_id?: string;
        };
        Audit: components["schemas"]["MongoResource"] & {
            consortia_id?: string;
            user_id?: string;
            org_id?: string;
            target_email?: string;
            /** @enum {string} */
            action?: "create" | "update" | "delete";
            objectType?: string;
            data?: {
                _id: string;
                [key: string]: unknown;
            };
            timestamp?: number;
        };
        Billing_Input_Stripe: {
            /** @enum {string} */
            type?: "stripe";
            /** @description The Stripe Token object, see https://stripe.com/docs/api/tokens/object for details. For this API call, only the id of the token object created in Stripe is needed. */
            token?: {
                /** @description Identifier of the Token object already created in Stripe */
                id?: string;
            };
        };
        Billing_Input_Other: {
            /** @enum {string} */
            type?: "other";
            /** @description Contract code issued by contacting Kaleido support for custom invoicing */
            contract_binding_code?: string;
        };
        Billing_Input:
            | components["schemas"]["Billing_Input_Stripe"]
            | components["schemas"]["Billing_Input_Other"];
        Billing_Output: components["schemas"]["Stripe_Billing"] & {
            /**
             * @description Type of billing
             * @enum {string}
             */
            type?: "none" | "aws" | "stripe" | "other";
        };
        BillingSummary: {
            /** @description Memberships in this Organization and the associated costs */
            memberships?: {
                membership_id?: string;
                plan_id?: string;
                unit_cost_usd?: number;
                unit_hrs?: number;
                total_usd?: number;
            }[];
            /** @description Nodes in this Organization and the associated costs */
            nodes?: {
                node_id?: string;
                environment_id?: string;
                /** @enum {string} */
                size?: "small" | "medium" | "large";
                plan_id?: string;
                unit_cost_usd?: number;
                unit_hrs?: number;
                total_usd?: number;
            }[];
            /** @description Services in this Organization and the associated costs */
            services?: {
                service_id?: string;
                plan_id?: string;
                unit_cost_usd?: number;
                unit_hrs?: number;
                total_usd?: number;
            }[];
            /** @description Storage costs for this Organization */
            storage?: {
                plan_id?: string;
                unit_cost_usd?: number;
                unit_hrs?: number;
                total_usd?: number;
            }[];
            /** @description Associated costs for support for this Organization */
            support?: {
                plan_id?: string;
                unit_cost_usd?: number;
                unit_hrs?: number;
                total_usd?: number;
            }[];
        };
        Configuration_Create_Input: {
            /** @description Field denoting the membership which owns the Configuration */
            membership_id: string;
            /** @description User-friendly name for the Configuration */
            name?: string;
            /**
             * @description The type of configuration being managed
             * @enum {unknown}
             */
            type:
                | "node_config"
                | "kms"
                | "opsmetric"
                | "backup"
                | "networking"
                | "baf"
                | "cloudhsm";
            details:
                | components["schemas"]["Node_Config"]
                | components["schemas"]["KMS_Config"]
                | components["schemas"]["OpsMetric_Config"]
                | components["schemas"]["Backup_Config"]
                | components["schemas"]["Networking_Config"]
                | components["schemas"]["BAF_Config"]
                | components["schemas"]["CloudHsm_Config"];
        };
        Node_Config: {
            /** @description minimum gas price to accept for a transaction (default: 0) */
            gas_price?: number;
            /** @description Target gas limit sets the artificial target gas floor for the blocks to mine (default: 804247552) */
            target_gas_limit?: number;
            /** @description List of origins that are allowed to access RPC/WSS endpoints on nodes (default: '*') */
            cors_origin_hosts?: string;
            /** @description Verbosity of Geth logs (default: info) */
            geth_log_verbosity?: unknown;
            /**
             * @description Garbage collection mode for Geth/Quorum nodes (default: full; archive applies only to Large nodes)
             * @enum {unknown}
             */
            gc_mode?: "full" | "archive";
            /**
             * @description Sync mode for Geth/Quorum nodes (default: full)
             * @enum {unknown}
             */
            sync_mode?: "full" | "fast" | "light";
            /** @description Geth/Quorum: Sets a cap on gas that can be used in eth_call/estimateGas (0=infinite) (default: 25000000) */
            rpc_gas_cap?: number;
            /** @description Geth/Quorum: Megabytes of memory allocated to internal caching in geth (default: 64) */
            geth_cache_size?: number;
            /** @description Geth/Quorum: Percentage of cache memory allowance to use for database io in geth (default: 50) */
            geth_cache_database_share?: number;
            /** @description Geth/Quorum: Percentage of cache memory allowance to use for trie caching in geth (default: 15) */
            geth_cache_trie_share?: number;
            /** @description Geth/Quorum: Percentage of cache memory allowance to use for trie pruning in geth (default: 25) */
            geth_cache_gc_share?: number;
            /** @description Geth/Quorum: Percentage of cache memory allowance to use for snapshot caching in geth (default: 10) */
            geth_cache_snapshot_share?: number;
            /** @description Geth/Quorum: Time interval in minutes to regenerate the trie cache journal in geth (default 60) */
            geth_cache_trie_rejournal_interval?: number;
            /** @description REST API Gateway - limits the maximum number of messages per block this node will throttle into the blockchain, when delivering asynchronously via Apache Kafka (default 25) */
            restgw_max_inflight?: number;
            /** @description REST API Gateway - maximum time to wait for a transaction to be mined into a block (default 60 seconds) */
            restgw_max_tx_wait_time?: number;
            /** @description REST API Gateway - when set to true, the REST API Gateway always pre-allocates a nonce to transactions. It does not rely on the Ethereum Node or Cloud HSM signer to assign nonces (after ordering via Kafka). */
            restgw_always_manage_nonce?: boolean;
            /** @description REST API Gateway - the amount of concurrency to use when submitting messages into the Ethereum Node or Cloud HSM signer after retrieving from Kafka. Recommended to be used with restgw_always_manage_nonce=true to maintain ordering of TX from the same address (default 1 - sequential & ordered). */
            restgw_send_concurrency?: number;
            /** @description REST API Gateway - when restgw_always_manage_nonce=true and restgw_send_concurrency>1 failed transactions can temporarily block later transactions already in-flight in the gateway, causing transaction timeouts. Set this to true to automatically fill gaps with benign transactions to allow later TX to proceed. */
            restgw_attempt_gap_fill?: boolean;
            /** @description REST API Gateway - how many milliseconds to wait collecting messages from parallel REST API calls before flushing to Apache Kafka, when sending aynchronously (default 0 - send immediately) */
            restgw_flush_frequency?: number;
            /** @description REST API Gateway - how many messages to attempt to include in each batch, when sending aynchronously via Apache Kafka (default 0 - send immediately) */
            'restgw_flush_msgs"'?: number;
            /** @description REST API Gateway - how many bytes to attempt to include in each batch, when sending aynchronously via Apache Kafka (default 0 - send immediately) */
            restgw_flush_bytes?: number;
        };
        KMS_Config: {
            /**
             * @description Cloud provider supporting the KMS
             * @enum {unknown}
             */
            provider: "aws" | "azure";
            /** @description AWS region containing the KMS, only needed for AWS */
            region?: string;
            /** @description AWS role_arn for IAM role whose principal is Kaleido's AWS account (Recommended for AWS KMS) */
            role_arn?: string;
            /** @description AWS API access key ID (Not recommended, Use role_arn instead), or Azure OAuth client ID */
            api_key?: string;
            /** @description AWS API access secret (Not recommended, Use role_arn instead), or Azure OAuth client secret (set-only) */
            api_secret?: string;
            /** @description AWS master key ARN or Alias, or Azure Key Identifier */
            master_key: string;
        };
        OpsMetric_Config: {
            /**
             * @description Cloud provider supporting the Ops Metrics target
             * @enum {unknown}
             */
            provider: "aws";
            /** @description The region within the cloud provider containing the Ops Metrics target */
            region: string;
            /** @description AWS role_arn for IAM role whose principal is Kaleido's AWS account (Recommended) */
            role_arn?: string;
            /** @description ID if the IAM user or role created with Cloudwatch create/describeLogGroups, create/describeLogStreams, and putLogEvents permissions (Not recommended, Use role_arn instead) */
            user_id?: string;
            /** @description Secret of the IAM user or role created with Cloudwatch create/describeLogGroups, create/describeLogStreams, and putLogEvents permissions (set-only) (Not recommended, Use role_arn instead) */
            user_secret?: string;
            /** @description Name of the logging group in Cloudwatch */
            group: string;
        };
        /** BAF Config */
        BAF_Config: {
            /** @description Optional tag for a list of tenants owned by the same membership to be synchronized to the node dyanmically, and to be used in mapping with 'templated' set to true */
            tenants_tag?: string;
            /** @description Configuration for authenticating application credentials */
            appcreds: {
                /** @description Is application credential based security enabled? */
                enabled: boolean;
                /** @description Whether an app can authenticate by supplying the application credential in a Basic Auth header */
                basicAuth?: boolean;
                /** @description Whether an app can authenticate by supplying the secret part of the application credential as a Bearer token */
                bearer?: boolean;
                /** @description A HTTP Header name that an app can use to authenticate with the secret part of the application credential */
                header?: string;
                /** @description A HTTP Cookie name that an app can use to authenticate with the secret part of the application credential */
                cookie?: string;
                /** @description A HTTP Query Parameter name that an app can use to authenticate with the secret part of the application credential */
                query?: string;
                /** @description Mapping rules for application crdentials */
                mappings?: {
                    /** @description Any comment you want to store to describe this mapping */
                    comment?: string;
                    /** @description The ruleset to apply to connections matching this mapping */
                    ruleset: string;
                    /** @description If true, the claim matcher will be executed against each Tenant matching the 'tenants_tag' by expanding {{.propertyName}} templating within the strings before executing the match */
                    templated?: boolean;
                    /** @description Matching criteria to apply to an authenticated application credential */
                    claims: {
                        /** @description Regular expression match for the ID of the application credential (the username) */
                        id: string;
                    };
                }[];
            };
            /** @description Configuration for authenticating JWT Tokens */
            jwt: {
                /** @description Is JWT based security enabled? */
                enabled: boolean;
                /** @description Whether an app can authenticate by supplying a JWT as a Bearer token */
                bearer?: boolean;
                /** @description A HTTP Header name that an app can use to authenticate with a JWT */
                header?: string;
                /** @description A HTTP Cookie name that an app can use to authenticate with a JWT */
                cookie?: string;
                /** @description A HTTP Query Parameter name that an app can use to authenticate with a JWT */
                query?: string;
                /** @description Mapping rules for JWT tokens */
                mappings?: {
                    /** @description Any comment you want to store to describe this mapping */
                    comment?: string;
                    /** @description The ruleset to apply to connections matching this mapping */
                    ruleset?: string;
                    /** @description If true, the claim matcher will be executed against each Tenant matching the 'tenants_tag' by expanding {{.propertyName}} templating within the strings before executing the match */
                    templated?: boolean;
                    /** @description Matching criteria to apply to the claims inside of an authenticated JWT */
                    claims?: Record<string, never>;
                }[];
            };
            /** @description Each ruleset describes a set of permissions that apply to a blockchain application connection */
            rulesets: {
                [key: string]:
                    | {
                          /** @description Any comment you want to store to describe this ruleset */
                          comment?: string;
                          /** @description Control over operations to submit tranasctions and query data via smart contract deployment and execution */
                          tx?: {
                              /** @description Rule matching regular expression on 'from' (signer) addresses - use '.*' to match any from address */
                              from: string;
                              /** @description Rule matching regular expression on 'to' (target) addresses - use '.*' to match any transaction, or '.+' to exclude new contract deployment (where 'to' will be empty) */
                              to: string;
                              /** @description Whether 'call' (read-only data query) operations are allowed */
                              call?: boolean;
                              /** @description Whether 'estimateGas' (read-only data simulation) operations are allowed */
                              estimate?: boolean;
                              /** @description Whether 'sendTansaction' (node-signed transaction) operations are allowed */
                              send?: boolean;
                              /** @description Whether 'sendRawTansaction' (externally-signed transaction) operations are allowed */
                              sendRaw?: boolean;
                              /** @description Whether transaction sends can deploy new contracts (with an empty 'to' field) */
                              deploy?: boolean;
                          }[];
                          /** @description Control over operations to query block and transaction data from the blockchain ledger */
                          chain?: {
                              /** @description Query summary information about the chain - such as the chain ID */
                              info?: boolean;
                              /** @description Query for receipts by hash - such as to confirm mining of a transaction after submitting it */
                              receipts?: boolean;
                              /** @description Query for pending transactions */
                              pending?: boolean;
                              /** @description Query block information */
                              blocks?: boolean;
                              /** @description Query transaction information */
                              transactions?: boolean;
                              /** @description Query for updates to transaction and block data using filters */
                              filter?: boolean;
                              /** @description Subscribe for updates to transaction and block data using websocket subscriptions */
                              subscribe?: boolean;
                          };
                          /** @description Control over operations to access information on accounts */
                          accounts?: {
                              /** @description Query the 'coinbase' address of the node */
                              coinbase?: boolean;
                              /** @description Query the ether balance of an account */
                              balance?: boolean;
                              /** @description Query the transaction count of an account, to determine the likely next 'nonce' to use when exernally signing a transaction */
                              nonce?: boolean;
                              /** @description Query the storage owned by an address or smart contract */
                              storage?: boolean;
                              /** @description List the accounts where the private keys are available to the connected node */
                              list?: boolean;
                              /** @description Sign arbitrary data with the account private keys are available to the connected node */
                              sign?: boolean;
                          };
                          /** @description Whitelist or blacklist JSON/RPC methods directly. This setting overrides any detailed configuration in the other configuration rules */
                          rpc?: {
                              /** @description Regular expression matcher for the JSON/RPC method name */
                              method?: string;
                              /** @description Whether to allow or deny methods that match the regular expression specified in 'method' */
                              allow?: boolean;
                          }[];
                      }
                    | undefined;
            };
            /** @description Logging configuration */
            logging?: {
                /** @description The level for logging. 0=Error 1=Audit (default) 2=Debug */
                level?: number;
            };
            /** @description CORS configuration */
            cors?: {
                /** @description The allowed origins (default '*') */
                allowedOrigins?: string[];
                /** @description The allowed headers (default '*') */
                allowedHeaders?: string[];
                /** @description The allowed methods (default POST,GET) */
                allowedMethods?: string[];
                /** @description Whether to allow basic auth credentials in requests (default true) */
                allowCredentials?: boolean;
                /** @description Maximum number of seconds the results can be cached (default 600). */
                maxAge?: number;
            };
        };
        /** Cloud HSM Signer Configuration */
        CloudHsm_Config: {
            /**
             * @description Cloud HSM backend provider
             * @enum {string}
             */
            provider: "aws" | "azure" | "hashicorp" | "aws_kms";
            /** @description AWS - CloudHSM Elastic Network Interface (ENI) IP address, Azure - https://vault.azure.net, HashiCorp - vaultUrl, AWS_KMS - not used */
            target_address?: string;
            /** @description AWS - not used, Azure - not used, HashiCorp - not used, AWS_KMS - AWS region of aws_kms instance */
            target_region?: string;
            /** @description AWS - username , Azure - clientId, HashiCorp - not used, AWS_KMS - AWS API access key ID */
            user_id?: string;
            /** @description AWS - password, Azure - clientSecret, HashiCorp - vaultToken, AWS_KMS - AWS API access secret */
            user_secret: string;
            /** @description AWS - not used, Azure - subscriptionId, HashiCorp - not used, AWS_KMS - not used */
            subscription_id?: string;
            /** @description AWS - not used, Azure - tenantId, HashiCorp - not used, AWS_KMS - not used */
            tenant_id?: string;
            /** @description AWS - not used, Azure - keyVaultName, HashiCorp - secretPath, defaults to '/ethereum', AWS_KMS - not used */
            vault_name?: string;
            /** @description AWS always requires client signing cert; Azure & AWS KMS do not need special TLS configurations; HashiCorp Vault may require support for self-signed server certificates */
            tls?: {
                /** @description AWS: the customer CA cert that signed the HSM cluster certificate, in PEM format; HashiCorp: Server root CAs to trust, in PEM format */
                ca_certs?: string;
                /** @description Default: false. Can be used in development to accept HashiCorp Vault server certificates that are self-signed or signed by non-verifiable CAs */
                insecure_skip_verify?: boolean;
                /** @description AWS: not used; HashiCorp: client certificate in PEM format (for mutual TLS authentication) */
                client_certs?: string;
                /** @description AWS: not used; HashiCorp: client certificate private key */
                client_cert_secret?: string;
            };
        };
        Networking_Config: {
            /** @description Whether the node is publicly routable or not */
            allow_public: boolean;
            /** @description Whether the node is privately routable via AWS PrivateLink or not */
            allow_private: boolean;
        };
        Backup_Config: {
            /**
             * @description Cloud provider supporting the backup storage
             * @enum {unknown}
             */
            provider: "aws" | "azure";
            /** @description The region within the cloud provider containing the backup storage Target Network Configured */
            region?: string;
            /** @description AWS role_arn for IAM role whose principal is Kaleido's AWS account (Recommended for AWS Backup) */
            role_arn?: string;
            /** @description For AWS: ID of the IAM user or role created with S3 write permissions (Not recommended, Use role_arn instead), for Azure: the Storage Account Name */
            user_id?: string;
            /** @description For AWS: Secret of the IAM user or role created with S3 write permissions (set-only) (Not recommended, Use role_arn instead), for Azure: the Account Secret Key */
            user_secret?: string;
            /** @description For AWS: Name of the S3 bucket to store backups, for Azure: Name of the Container */
            bucket: string;
        };
        Configuration: components["schemas"]["MongoResource"] &
            components["schemas"]["Configuration_Create_Input"] & {
                /** @description Auto-populated field denoting the environment containing the Configuration */
                environment_id?: string;
            };
        Compliance_Starter: {
            compliant?: boolean;
            consortia?: {
                count?: number;
                decentralized?: string[];
            };
            environments?: {
                count?: {
                    consortia?: Record<string, never>;
                };
            };
            appcreds?: {
                count?: {
                    environments?: Record<string, never>;
                };
            };
            configurations?: {
                count?: {
                    environments?: Record<string, never>;
                };
                type?: {
                    environments?: Record<string, never>;
                };
            };
            nodes?: {
                count?: {
                    environments?: Record<string, never>;
                };
                size?: {
                    small?: string[];
                    medium?: string[];
                    large?: string[];
                };
            };
            service?: {
                count?: {
                    environments?: Record<string, never>;
                };
                type?: Record<string, never>;
            };
            roles?: {
                count?: number;
            };
        };
        Compliance_Team: {
            compliant?: boolean;
            consortia?: {
                count?: number;
                decentralized?: string[];
            };
            appcreds?: {
                count?: {
                    environments?: Record<string, never>;
                };
            };
            configurations?: {
                count?: {
                    environments?: Record<string, never>;
                };
                type?: {
                    environments?: Record<string, never>;
                };
            };
            nodes?: {
                size?: {
                    small?: string[];
                    medium?: string[];
                    large?: string[];
                };
            };
            service?: {
                type?: Record<string, never>;
            };
            roles?: {
                count?: number;
            };
        };
        Compliance_Business_Enterprise: {
            compliant?: boolean;
            appcreds?: {
                count?: {
                    environments?: Record<string, never>;
                };
            };
            configurations?: {
                count?: {
                    environments?: Record<string, never>;
                };
                type?: {
                    environments?: Record<string, never>;
                };
            };
            nodes?: {
                size?: {
                    small?: string[];
                    medium?: string[];
                    large?: string[];
                };
            };
            service?: {
                type?: Record<string, never>;
            };
            roles?: {
                count?: number;
            };
        };
        Consortia_Update_Input: {
            /** @description User-friendly consortia name */
            name?: string;
            /** @description User-friendly description of the consortia use case */
            description?: string;
            /**
             * @description Lifecycle state of the consortia
             * @enum {string}
             */
            state?: "setup" | "live" | "delete_pending" | "deleted";
        };
        Consortia_Create_Input: components["schemas"]["Consortia_Update_Input"] & {
            /**
             * @description Organization name for the first membership that will be auto-created along with the consortium
             * @default Default Organization
             */
            org_name?: string;
        };
        Consortia: components["schemas"]["MongoResource"] &
            components["schemas"]["Consortia_Update_Input"] & {
                /** @description Auto-populated field containing the Organization ID which created the Consortia */
                owner?: string;
                /** @description Auto-populated field denoting when an environment was successfully deleted */
                deleted_at?: string;
            };
        Contract_Update_Input: {
            /** @description Name of the contract project (must be unique across all contracts in the consortium) */
            name?: string;
            /** @description Description of the contract */
            description?: string;
        };
        Contract_Create_Input: WithRequired<
            components["schemas"]["Contract_Update_Input"] & {
                /** @description Field denoting the membership which owns the Contract */
                membership_id?: string;
                /**
                 * @description The type of contract project being created
                 * @enum {string}
                 */
                type?:
                    | "github"
                    | "precompiled"
                    | "corda_jar"
                    | "fabric_precompiled_go"
                    | "fabric_upload_node";
            },
            "membership_id" | "type" | "name"
        >;
        Contract: {
            /** @description Auto-generated key for the consortium that owns this environment */
            consortia_id?: string;
        } & components["schemas"]["MongoResource"] &
            components["schemas"]["Contract_Create_Input"];
        CompiledContract_Update_Input: {
            /** @description Description of the compiled contract. Typically used as the version string, such as 'v1' */
            description?: string;
        };
        CompiledContract_Create_Github_Input: WithRequired<
            components["schemas"]["CompiledContract_Update_Input"] & {
                /** @description Field denoting the membership which owns the Compiled Contract */
                membership_id?: string;
                /** @description The Github url to the exact contract solidity file to be compiled. (ex: https://github.com/kaleido-io/kaleido-js/blob/master/deploy-transact/contracts/simplestorage.sol) */
                contract_url?: string;
                /** @description The name of the contract to be compiled. This property is required if multiple contracts are defined in the solidity file. */
                contract_name?: string;
                /** @description A Github personal access token with read access. Only required if the Github code is located in a private repository. Kaleido DOES NOT store this token. As a result it must be provided on each request to compile a contract that is located in a private repository. */
                oauth_token?: string;
                /**
                 * @description The specific EVM version to target when compiling. Omitting this property will result in byzantium as the default.
                 * @enum {string}
                 */
                evm_version?:
                    | "byzantium"
                    | "homestead"
                    | "tangerineWhistle"
                    | "spuriousDragon"
                    | "constantinople";
                /** @description The specific solc compiler version to target when compiling (ex: v0.4.24+commit.e67f0147). Omitting this property will result in Kaleido auto detecting the version specified in the source file. */
                solc_version?: string;
            },
            "membership_id" | "description" | "contract_url"
        >;
        CompiledContract_Create_Precompiled_Input: WithRequired<
            components["schemas"]["CompiledContract_Update_Input"] & {
                /** @description Field denoting the membership which owns the Compiled Contract */
                membership_id?: string;
                /** @description The compiled ABI of the contract */
                abi?: string;
                /** @description The compiled bytecode of the contract */
                bytecode?: string;
                /** @description The dev_docs for the contract */
                dev_docs?: string;
                /**
                 * @description The specific EVM version used to compile.
                 * @enum {string}
                 */
                evm_version?:
                    | "byzantium"
                    | "homestead"
                    | "tangerineWhistle"
                    | "spuriousDragon"
                    | "constantinople";
                /** @description The specific solc compiler version used to compile. */
                solc_version?: string;
            },
            "membership_id" | "description" | "abi" | "bytecode"
        >;
        CompiledContract_Create_Input:
            | components["schemas"]["CompiledContract_Create_Github_Input"]
            | components["schemas"]["CompiledContract_Create_Precompiled_Input"];
        CompiledContract_Create_Input_File: {
            membership_id?: string;
            /**
             * Format: binary
             * @description The file to upload containing the Fabric chaincode (golang binary or node.js archive) or Corda contract/flow jars
             */
            file?: string;
            /**
             * @description (Fabric only) whether the chaincode requires initialization
             * @default false
             */
            init_required?: boolean;
            /** @description (Fabric only) Only used by chaincodes that use private data collections */
            private_data_collections?: {
                /** @description name of the collection, this will be used in the chaincode implementation to reference this collection */
                name?: string;
                /** @description Defines the organization peers allowed to persist the collection data. Follows the [Fabric policy syntax](https://hyperledger-fabric.readthedocs.io/en/latest/endorsement-policies.html#endorsement-policy-syntax) */
                policy?: string;
                /** @description Number of peers required to disseminate the private data as a condition of the endorsement of the chaincode */
                requiredPeerCount?: number;
                /** @description For data redundancy purposes, the number of other peers that the current endorsing peer will attempt to distribute the data to */
                maxPeerCount?: number;
                /** @description For very sensitive information such as pricing or personal information, this value represents how long the data should live on the private database in terms of blocks. The data will live for this specified number of blocks on the private database and after that it will get purged, making this data obsolete from the network. To keep private data indefinitely, that is, to never purge private data, set the blockToLive property to 0 */
                blockToLive?: number;
                /** @description a value of true indicates that peers automatically enforce that only clients belonging to one of the collection member organizations are allowed read access to private data */
                memberOnlyRead?: boolean;
                /** @description a value of true indicates that peers automatically enforce that only clients belonging to one of the collection member organizations are allowed write access to private data */
                memberOnlyWrite?: boolean;
                /** @description defines the endorsement policy that needs to be met in order to write to the private data collection. The collection level endorsement policy overrides to chaincode level policy. Follows the [Fabric policy syntax](https://hyperledger-fabric.readthedocs.io/en/latest/endorsement-policies.html#endorsement-policy-syntax) */
                endorsementPolicy?: {
                    signaturePolicy?: string;
                    channelConfigPolicy?: string;
                };
                indexes?: components["schemas"]["CouchDB_Indexes"];
            }[];
            couchdb_indexes?: components["schemas"]["CouchDB_Indexes"];
        };
        /** @description (Fabric only) Optional indexes definition used by the chaincode to perform queries. Each index object in the array will be saved as a separate index file in the chaincode package */
        CouchDB_Indexes: {
            /** @description Name of the index */
            name: string;
            /** @description JSON object describing the index to create */
            index: {
                /** @description array of field names following the sort syntax */
                fields?: string[];
            };
            /** @description Name of the design document in which the index will be created */
            ddoc?: string;
            /** @enum {string} */
            type?: "json";
        }[];
        CompiledContract_Promote_Input: {
            /** @description The environment to promote the compiled contract to */
            environment_id: string;
            /** @description The friendly path to name the Gateway API. */
            endpoint?: string;
        };
        CompiledContract: {
            /** @description The contract project this compilation is associated with */
            contract_id?: string;
            /**
             * @description The current processing state of the compiled project.
             * @enum {string}
             */
            state?: "created" | "compiling" | "compiled" | "failed";
            /** @description The hashed version of the bytecode used to prevent duplicate compilations being created */
            bytecode_hash?: string;
            /** @description Indicates whether or not this contract accepts parameters in it's constructor */
            has_constructor_params?: boolean;
            /** @description A list of errors that occurred during compilation of the contract */
            errors?: string[];
        } & components["schemas"]["MongoResource"] &
            components["schemas"]["Contract_Create_Input"] &
            components["schemas"]["CompiledContract_Create_Github_Input"] &
            components["schemas"]["CompiledContract_Create_Precompiled_Input"];
        Chaincode_Deploy_Input: {
            compiled_contract_id?: string;
            /**
             * @description Whether the chaincode must be initialized before taking any transaction calls
             * @default false
             */
            init_required?: boolean;
        };
        Charter: components["schemas"]["Consortia"] & {
            memberships?: components["schemas"]["Membership"][];
            environments?: components["schemas"]["CharterEnvironment"][];
        };
        EnvZone_Update_Input: {
            /** @description Friendly name to identify the deployment zone */
            name?: string;
        };
        EnvZone_Create_Input: WithRequired<
            components["schemas"]["EnvZone_Update_Input"] & {
                /**
                 * @description Who is managing the deployment zone
                 * @enum {string}
                 */
                type?: "kaleido";
                /**
                 * @description The cloud which is hosting the deployment zone. Only allowed for Kaleido-hosted deployment zones
                 * @enum {string}
                 */
                cloud?: "aws" | "azure";
                /**
                 * @description Region of the specified platform. Only allowed for Kaleido-hosted deployment zones
                 * @enum {string}
                 */
                region?: "us-east-2";
                /** @description The highest environment revision broadcast received by this zone */
                revision_received?: number;
            },
            "type" | "cloud" | "region"
        >;
        EnvZone: components["schemas"]["MongoResource"] &
            components["schemas"]["EnvZone_Create_Input"] & {
                /** @description Auto-generated key for the consortium that owns this environment */
                environment_id?: string;
                /** @description Auto-generated. Determines the default region to use if none is specified for downstream actions */
                default?: boolean;
                /** @description Auto-generated. Determines the host for deploying to this zone */
                cm_host?: string;
                /** @description Auto-generated. Determines the host for nodes and services deployed to this zone */
                net_host?: string;
                /** @description Auto-generated. Determines the host for services deployed to this zone */
                x_host?: string;
                /** @description Auto-generated. Tracks whether the net_host and x_host are capable of supporting multi-region deployments */
                multi_region_compatible?: boolean;
            };
        Environment_Update_Input: {
            /** @description User-friendly environment name */
            name?: string;
            /** @description User-friendly description of the environment use case */
            description?: string;
            /**
             * @description Lifecycle state of the environment
             * @enum {string}
             */
            state?:
                | "setup"
                | "initializing"
                | "live"
                | "delete_pending"
                | "deleted"
                | "failed"
                | "pause_pending"
                | "paused"
                | "resume_pending"
                | "upgrading"
                | "paused_upgrading";
            /** @description The release associated with this environment (auto-assigned) */
            release_id?: string;
            /** @description Accounts to fund with ether in the genesis configuration of this environment. The ether pool address is generated and funded automatically. Key is an Ethereum address. Value is the account's initial balance. */
            prefunded_accounts?: Record<string, never>;
            /** @enum {string} */
            region?: "us-east" | "us-west" | "eu";
        };
        Environment_Create_Input: WithRequired<
            components["schemas"]["Environment_Update_Input"] & {
                /**
                 * @description The protocol which will be used by all nodes in the environment. Select `pantheon` in order to use Hyperledger Besu.
                 *
                 * @enum {string}
                 */
                provider?: "quorum" | "geth" | "pantheon" | "corda" | "fabric";
                /**
                 * @description The consensus type which will be used by all nodes in the environment
                 * @enum {string}
                 */
                consensus_type?: "raft" | "ibft" | "poa" | "single-notary";
                /** @description The numeric chain ID deterministically generated from the environment ID */
                chain_id?: number;
                /** @description The block interval which will be used by all nodes in the environment */
                block_period?: number;
                /** @description Determines which test features are enabled for this environment */
                test_features?: {
                    /** @description Determines whether the environment is enabled with functionality to create nodes in multiple regions */
                    multi_region?: boolean;
                };
                /** @description Limit creation of signing nodes based on membership permissions in decentralized consortia */
                limit_initial_signers?: boolean;
            },
            "provider" | "consensus_type"
        >;
        Environment: components["schemas"]["MongoResource"] &
            components["schemas"]["Environment_Create_Input"] & {
                /** @description Auto-generated key for the consortium that owns this environment */
                consortia_id?: string;
                /** @description Auto-populated field based on the environment type and consensus selection */
                limits?: {
                    nodes?: number;
                    signers?: number;
                    services?: number;
                    keys?: number;
                };
                /** @description A read only view of the zones in the environment, used to synchronize addition of zones */
                zone_list?: string[];
                /** @description A read only view of the nodes in the environment, used to synchronize addition of nodes */
                node_list?: string[];
                /** @description A read only view of the services in the environment, used to synchronize addition of services */
                service_list?: string[];
                /** @description Auto-populated field denoting how many hours to wait before monitoring for quiesce actions */
                autopause_init_delay?: number;
                /** @description Auto-populated field denoting how many hours after the last transaction an environment will quiesce */
                autopause_idle_hours?: number;
                /** @description Auto-populated field denoting when an environment was successfully deleted */
                deleted_at?: string;
                /** @description Auto-populated field denoating the last time the enviornment was successfully quiesced/paused */
                paused_at?: string;
                /** @description Auto-populated field denoting the last time the environment was successfully resumed */
                resumed_at?: string;
            };
        EnvironmentStatus: {
            /**
             * @description Lifecycle state of the environment
             * @enum {string}
             */
            state?:
                | "setup"
                | "initializing"
                | "live"
                | "delete_pending"
                | "deleted"
                | "failed"
                | "pause_pending"
                | "paused"
                | "resume_pending"
                | "upgrading";
            /** @description A list of all the node ID's */
            node_list?: string[];
            /** @description Object containing details about upgrading an environment */
            upgrade?: {
                /** @description True if all nodes are available for upgrade. False otherwise */
                available?: boolean;
                /** @description True if the supported Upgrade to the target release is an 'Hard Fork and Upgrade' operation, performed by called /hardfork endpoint with upgrade_with_hard_fork option set to true */
                require_hard_fork_upgrade?: boolean;
                /** @description The EIPs that are in effect in the current environment and the activation block numbers */
                chain_config?: Record<string, never>;
                /** @description List of EIPs that can be applied to the current environment via a hard fork operation, by calling the /hardfork endpoint */
                optional_hardfork_eips?: string[];
                /** @description List of EIPs that must be applied in order to upgrade to the latest release */
                prereq_hardfork_eips?: string[];
                current_release?: {
                    _id?: string;
                    /** @description The protocol which will be used by all nodes in the environment */
                    provider?: string;
                    /** @description A list of EIPs that new environments created in this release will have in the genesis block */
                    chain_config?: string;
                    /** @description A key pair object key being a docker image name and value being a tagged version */
                    images?: Record<string, never>;
                    /** @description The version of this release */
                    version?: Record<string, never>;
                    version_padded?: Record<string, never>;
                    _revision?: Record<string, never>;
                    created_at?: Record<string, never>;
                };
                target_release?: {
                    _id?: string;
                    /** @description The protocol which will be used by all nodes in the environment */
                    provider?: string;
                    /** @description A list of EIPs that new environments created in this release will have in the genesis block */
                    chain_config?: string[];
                    /** @description A key pair object key being a docker image name and value being a tagged version */
                    images?: Record<string, never>;
                    /** @description The version of this release */
                    version?: string;
                    version_padded?: string;
                    _revision?: string;
                    created_at?: string;
                };
                /**
                 * @deprecated
                 * @description Boolean indicating if the upgrade requires a hard fork. Deprecated. The hard fork operation is no longer tied to an upgrade.
                 */
                hard_fork?: boolean;
                /**
                 * @deprecated
                 * @description Chain configurations missing from the environment. Deprecated. `optional_hardfork_eips` and `prereq_hardfork_eips` properties are used to make it clear what EIPs are applicable in hard forks.
                 */
                missing_chain_config?: string[];
                /**
                 * @deprecated
                 * @description Chain configurations that are available to hard fork to. Deprecated. `optional_hardfork_eips` and `prereq_hardfork_eips` properties are used to make it clear what EIPs are applicable in hard forks.
                 */
                optional_chain_config?: string[];
            };
            health?: {
                /** @description True if all nodes are available, false otherwise */
                all_nodes_up?: boolean;
                /** @description The number of nodes that are currently up */
                nodes_up?: number;
                /** @description The number of nodes that are currently down */
                nodes_down?: number;
                /** @description The highest block height of the available nodes */
                highest_block_height?: number;
                /** @description The lowest block height of the available nodes */
                lowest_block_height?: number;
            };
        };
        Eth_Stats: {
            /**
             * @description ```json
             * {
             *   "p": "Peers (count)",
             *   "tp": "Pending transactions (count)",
             *   "tq": "Queued transactions (count)",
             *   "h": "Block height (count)"
             * }
             * ```
             */
            legend?: Record<string, never>;
            /** @description For each node, returns an object describing the dimensions `p`, `tp`, `tq` and `h` */
            nodes?: Record<string, never>;
        };
        Eth_Balance: {
            /** @description Account balance in ether */
            ether?: string;
            /** @description Account balance in wei */
            wei?: string;
        };
        Env_Backup_Status: {
            /** @description Timestamp of when last backup was created */
            latest_backup?: string;
            /** @description Protocol Provider */
            provider?: string;
            /** @description List of backup files that will be uploaded to backup destinations */
            current_backup_files?: unknown[];
            /**
             * @description List of backup files that have been exported to backup destinations
             * ```json
             * [
             *   {
             *     "file": "2022-08-09T18:00:00.295Z-block-0-100.rlp",
             *     "date": "2022-08-09T18:00:00.295Z",
             *     "canonical_chain": true,
             *     "raftSwapFile": false,
             *     "start_block": {
             *         "block": 0,
             *         "hash": "0x76...93d",
             *         "parent_hash": "0x00...000"
             *     },
             *     "end_block": {
             *         "block": 100,
             *         "hash": "0xd72...569",
             *         "parent_hash": "0xd1...9ca"
             *     }
             *   }
             * ]
             * ```
             */
            history?: unknown[];
            /** @description Start block of last backup file */
            start_block?: number;
            /** @description End block of last backup file */
            end_block?: number;
        };
        Env_Backup_Object: {
            /** @description Enables Automated Environment Backups */
            enabled?: boolean;
            /** @description Type of Automated Backups, currently only Daily option */
            backup_type?: string;
            /**
             * @description How often a Backup will be taken, 1-4 times a day
             * @enum {unknown}
             */
            backup_frequency?: 1 | 2 | 3 | 4;
            /** @description Environment ID this Object is associated with */
            environment_id?: string;
        };
        Env_Backup_Input: {
            /** @description Enables Automated Environment Backups */
            enabled?: boolean;
            /**
             * @description How often a Backup will be taken, 1-4 times a day
             * @enum {unknown}
             */
            backup_frequency?: 1 | 2 | 3 | 4;
            /**
             * @description Type of frequency for a backup
             * @enum {unknown}
             */
            backup_type?: "Daily";
        };
        CharterEnvironment: components["schemas"]["Environment"] & {
            nodes?: components["schemas"]["Node"][];
            appcreds?: components["schemas"]["ApplicationCredential"][];
        };
        IdentityProof_Update_Input: {
            /** @description A descriptive name for usability */
            name?: string;
            /**
             * @description The type of the proof supplied in this document. Currently supporting only x.509 certificates.
             * @enum {string}
             */
            type?: "x509";
            /** @description The proof content. For x509 this should be a concatenated string of certs which are base64 encoded strings */
            payload?: string;
        };
        IdentityProof: components["schemas"]["MongoResource"] &
            components["schemas"]["IdentityProof_Update_Input"] & {
                /** @description Auto-generated on creating of a new proof record. This guarantees that a cert can only be used once and protects against replay attacks where an internal hacker grabs hold of a cert and tries to use it to register again. */
                nonce?: string;
                /** @description Auto-populated. The ID of the Organization associated with the identity proof */
                org_id?: string;
            };
        Integration_Update_Input: {
            /** @description User-friendly name for the Integration */
            name?: string;
            /** @description Object with type-specific integration details */
            details?: Record<string, never>;
        };
        Integration_Create_Input: WithRequired<
            components["schemas"]["Integration_Update_Input"] & {
                /** @description Auto-populated field denoting the environment containing the Integration */
                environment_id?: string;
                /** @description Field denoting the membership which owns the Integration */
                membership_id?: string;
                /** @description User-friendly name for the Integration */
                name?: string;
                /**
                 * @description The type of integration being managed
                 * @enum {string}
                 */
                type?: "clause" | "unchain" | "rhombus";
                /** @description Object with type-specific integration details */
                details?: Record<string, never>;
            },
            "membership_id" | "type" | "details"
        >;
        Integration: components["schemas"]["MongoResource"] &
            components["schemas"]["Integration_Create_Input"] & {
                /** @description Auto-populated field denoting the environment containing the Integration */
                environment_id?: string;
            };
        Backup_Input: {
            /** @description An AWS S3 Pre-Signed URL as the backup destination */
            presigned_url?: string;
        };
        Channel_Update_Input: {
            /** @description List of membership IDs for the channel organizations */
            members?: string[];
        };
        Channel_Create_Input: WithRequired<
            components["schemas"]["Channel_Update_Input"] & {
                /** @description Field denoting the membership which initiates the channel */
                membership_id?: string;
                /** @description Channel name used in the Fabric programming model. Must follow the channel naming convention (lower case alphanumerics, dots and dashes, starting and ending with an alphanumeric) */
                name?: string;
                /** @description Channel description */
                description?: string;
                /** @description Specify the policies that will override the default policies */
                policies?: components["schemas"]["Channel_Policy"][];
            },
            "membership_id" | "name" | "description"
        >;
        Channel_Policy: {
            /** @enum {string} */
            path?:
                | "Channel/Admins"
                | "Channel/Readers"
                | "Channel/Writers"
                | "Channel/Application/Admins"
                | "Channel/Application/Readers"
                | "Channel/Application/Writers"
                | "Channel/Application/LifecycleEndorsement"
                | "Channel/Application/Endorsement"
                | "Channel/Orderer/Admins"
                | "Channel/Orderer/Readers"
                | "Channel/Orderer/Writers"
                | "Channel/Orderer/BlockValidation";
            name?: string;
            /** @enum {string} */
            type?: "Signature" | "ImplicitMeta";
            /** @description for the syntax of the policy rules, refer to Hyperledger Fabric documentation https://hyperledger-fabric.readthedocs.io/en/release-2.4/endorsement-policies.html#endorsement-policy-syntax */
            rule?: string;
        };
        Channel: components["schemas"]["MongoResource"] &
            components["schemas"]["Channel_Create_Input"] & {
                /** @description Map of contract (chaincode) ID and metadata */
                contracts?: {
                    [key: string]:
                        | {
                              label?: string;
                              sequence?: string;
                              /** @default true */
                              init_required?: boolean;
                              contract_id?: string;
                          }
                        | undefined;
                };
            };
        Invitation_Update_Input: {
            consortia_id?: string;
            /** @description Name of the organization being invited to join the consortia */
            org_name?: string;
            /**
             * @description Lifecycle state of the invitation
             * @enum {string}
             */
            state?: "sent" | "accepted" | "declined" | "revoked" | "expired";
        };
        Invitation_Create_Input: WithRequired<
            components["schemas"]["Invitation_Update_Input"] & {
                /** @description Email to deliver the Consortia Invitation to */
                email?: string;
                /** @description Can be user-provided or auto-populated based on the user which created the invitation */
                from_org_id?: string;
                /** @description Can be user-provided or auto-populated based on the user which created the invitation */
                from_membership_id?: string;
                /** @description Permissions which can be leveraged by consortia enforcing advanced policy */
                permissions?: Record<string, never>;
            },
            "email" | "org_name"
        >;
        Invitation: components["schemas"]["MongoResource"] &
            components["schemas"]["Invitation_Create_Input"] & {
                /** @description Auto-populated field to have the record automatically be removed after X seconds */
                createdAt?: string;
                /** @description Auto-populated field based on the user which created the invitation */
                from?: string;
                /** @description Auto-populated field based on which user resolves the invitation */
                resolved_by?: string;
                /** @description Auto-populated field based on which organization is used when a user is accepting an invitation */
                org_id?: string;
            };
        InvitationCharter: components["schemas"]["Invitation"] & {
            consortia?: {
                name?: string;
                description?: string;
            };
            memberships?: {
                name?: string;
                /** @enum {string} */
                status?: "active" | "inactive" | "deleted";
            }[];
            environments?: {
                name?: string;
                nodes?: number;
                services?: number;
                region?: string;
                provider?: string;
                /** @enum {string} */
                consensus_type?: "raft" | "ibft" | "poa";
            }[];
        };
        Membership_Update_Input: {
            /** @description Name of the organization identified in the accepted invitation */
            org_name?: string;
            /** @description Permissions which can be leveraged by decentralized consortia */
            permissions?: {
                /** @description Determines whether the member can create and upgrade environments */
                manage_envs: boolean;
                /** @description Determines whether the member can invite other orgs to the consortium */
                invite_orgs: boolean;
                /** @description Determines whether the member can create signing nodes in environments */
                create_signers: boolean;
                /** @description Determines whether the member can create additional membership for themselves */
                multiple_members: boolean;
            };
            /** @description Identity type obtained from the backing organization */
            verification_type?: string;
            /** @description Identity proof obtained from the backing organization */
            verification_proof?: string;
            /** @description Indicates whether the verification_proof was automatically generated by Kaleido */
            verification_selfsigned?: boolean;
        };
        Membership_Create_Input: WithRequired<
            components["schemas"]["Membership_Update_Input"] & {
                consortia_id?: string;
                /** @description Auto-populated field representing the Organization for this Consortia membership */
                org_id?: string;
                /**
                 * @description Lifecycle state of the membership
                 * @enum {string}
                 */
                state?: "active" | "inactive" | "deleted";
            },
            "org_id"
        >;
        Membership: components["schemas"]["MongoResource"] &
            components["schemas"]["Membership_Create_Input"] & {
                /** @description Auto-populated field representing the Organization for this Consortia membership */
                org_id?: string;
                /** @description Auto-populated field denoting when a consortia was successfully deleted */
                deleted_at?: string;
            };
        Node_Update_Input: {
            /** @description ID of the Node Configuration being used by this node */
            node_config_id?: string;
            /** @description ID of the KMS Configuration being used by this node */
            kms_id?: string;
            /** @description ID of the Backup Configuration being used by this node */
            backup_id?: string;
            /** @description User-friendly name for the node */
            name?: string;
            /**
             * @description Pre-defined allowance for transaction pool and memory usage
             * @enum {string}
             */
            size?: "small" | "medium" | "large";
        };
        Node_Create_Input: WithRequired<
            components["schemas"]["Node_Update_Input"] & {
                /** @description Auto-populated field denoting the environment containing the node */
                environment_id?: string;
                /** @description ID of the Membership which owns the node */
                membership_id?: string;
                /** @description ID of the Ops Metric Configuration being used by this node */
                opsmetric_id?: string;
                /** @description ID of the EthConnect Configuration being used by this node */
                ethconnect_id?: string;
                /** @description ID of the EthConnect Configuration being used by this node */
                networking_id?: string;
                /** @description ID of the Startup Configuration being used by this node */
                node_config_id?: string;
                /**
                 * @description Pre-defined allowance for transaction pool and memory usage
                 * @enum {string}
                 */
                size?: "small" | "medium" | "large";
                /** @description Environment revision at which this node was added */
                revision_added?: number;
                /**
                 * @description The protocol inherited from the environment
                 * @enum {string}
                 */
                provider?: "quorum" | "geth" | "pantheon" | "corda" | "fabric";
                /**
                 * @description The consensus type inherited from the environment
                 * @enum {string}
                 */
                consensus_type?: "raft" | "ibft" | "poa" | "single-notary";
                /** @description ENODE uri for the node */
                enode_uri?: string;
                /** @description The node's identity, backed by a private key */
                node_identity?: string;
                /** @description The identity the node uses in the chosen consensus protocol */
                consensus_identity?: string;
                /** @description First user account for the node */
                first_user_account?: string;
                /**
                 * @description The role of this node in the environment - system monitor or customer node
                 * @enum {string}
                 */
                role?: "validator" | "monitor";
                /**
                 * @description Role of the node in consensus mechanism at creation
                 * @enum {string}
                 */
                init_consensus_role?: "signer" | "non-signer";
                /** @description Quorum specific field. The public address for sending private transactions to this node (via privateFor) */
                quorum_private_address?: string;
                /**
                 * @description Only applicable to Corda nodes, the type of database for saving state data.
                 * @enum {string}
                 */
                database_type?: "h2" | "postgres";
            },
            "membership_id"
        >;
        Node: components["schemas"]["MongoResource"] &
            components["schemas"]["Node_Create_Input"] & {
                /** @description Auto-populated field denoting the environment containing the node */
                environment_id?: string;
                /** @description Auto-populated set of URLs for communication with the node. Provider specific */
                urls?: {
                    [key: string]: string | undefined;
                };
            };
        Node_Status: {
            /** @description The node's public key */
            id?: string;
            /** @description The version the node is running */
            release?: string;
            /** @description The accounts on the node */
            user_accounts?: string[];
            /** @description The number of blocks in the chain */
            block_height?: number;
            /** @description The first user account for the node */
            consensus_identity?: string;
            /** @description The ID of the member that owns this node */
            membership_id?: string;
            /** @description The urls for connecting to the node */
            urls?: {
                /** @description The JSON RPC endpoint for the node */
                rpc?: string;
                /** @description The websocket endpoint */
                wss?: string;
                /** @description The kafka webhook endpoint */
                kaleido_connect?: string;
            };
            /** @description A messaging interface used to simplify the submission of Ethereum transactions */
            kafka?: {
                /** @description The nodes in the kafka cluster */
                brokers?: string[];
                /** @description The topic for sending requests */
                request_topic?: string;
                /** @description The topic for retrieving responses */
                reply_topic?: string;
            };
        };
        Node_Geth_POA: components["schemas"]["Node_Status"] & {
            /** @description The specific chain type info */
            geth?: {
                /** @description The node's public address */
                public_address?: string;
                /** @description The validators of the network */
                validators?: string[];
                current_validators?: string[];
                /** @description The EIPs and the block number from which they are active in the chain obtained from admin.nodeInfo */
                config?: Record<string, never>;
            };
        };
        Node_Quorum_IBFT: components["schemas"]["Node_Status"] & {
            /** @description The specific chain type info */
            quorum?: {
                /** @description The node's private address */
                private_address?: string;
                /** @description The node's public address */
                public_address?: string;
                /** @description The initial list of validators */
                istanbul_validators?: string[];
                /** @description The current list of validators in the network */
                current_validators?: string[];
                /** @description The EIPs and the block number from which they are active in the chain obtained from admin.nodeInfo */
                config?: Record<string, never>;
            };
        };
        Node_Quorum_Raft: components["schemas"]["Node_Status"] & {
            /** @description The specific chain type info */
            quorum?: {
                /** @description The node's private address */
                private_address?: string;
                /** @description The node's public address */
                public_address?: string;
                /** @description The EIPs and the block number from which they are active in the chain obtained from admin.nodeInfo */
                config?: Record<string, never>;
            };
        };
        Node_Pantheon_POA: components["schemas"]["Node_Status"] & {
            /** @description The specific chain type info */
            pantheon?: {
                /** @description The node's public address */
                public_address?: string;
                /** @description The current list of validators in the network */
                current_validators?: string[];
                /** @description The EIPs and the block number from which they are active in the chain obtained from admin.nodeInfo */
                config?: Record<string, never>;
            };
        };
        Node_Pantheon_IBFT: components["schemas"]["Node_Status"] & {
            /** @description The specific chain type info */
            pantheon?: {
                /** @description The node's public address */
                public_address?: string;
                /** @description The current list of validators in the network */
                current_validators?: string[];
                /** @description The EIPs and the block number from which they are active in the chain obtained from admin.nodeInfo */
                config?: Record<string, never>;
            };
        };
        Node_Fabric_Raft: {
            /** @description Unique ID of the node in the environment */
            id?: string;
            /**
             * @description Runtime state of the node
             * @enum {string}
             */
            status?:
                | "initializing"
                | "joining"
                | "joined"
                | "started"
                | "stop_pending"
                | "stopped"
                | "failed"
                | "paused"
                | "delete_pending"
                | "delete_failed"
                | "upgrading"
                | "upgrade_pending";
            /** @description 'orderer' or 'peer' */
            role?: string;
            fabric?: {
                /** @description Hostname and port of the Fabric node in the Kaleido hybrid network, used by the Kaleido network bridge to connect */
                p2p_address?: string;
                /** @description Hexidecimal string of a JSON object consisted of two fields: 'orgCA' and 'tlsCert' */
                node_info?: string;
                /** @description If the node is a Fabric peer, this exists to return the credentials to login to the blockchain explorer */
                explorer?: {
                    username?: string;
                    password?: string;
                };
            };
            /** @description URL endpoints for accessing the node and the explorer UI (if the node is a peer) */
            urls?: {
                /** @description URL to access the orderer node (node role must be 'orderer') */
                orderer?: string;
                /** @description URL to access the peer node (node role must be 'peer') */
                peer?: string;
                /** @description URL to access the explorer UI (node role must be 'peer') */
                explorer?: string;
            };
        };
        Node_Corda_Single_Notary: {
            /** @description SHA256 hash of the Corda node's nodeInfo binary data */
            id?: string;
            /**
             * @description Runtime state of the node
             * @enum {string}
             */
            status?:
                | "initializing"
                | "joining"
                | "joined"
                | "started"
                | "stop_pending"
                | "stopped"
                | "failed"
                | "paused"
                | "delete_pending"
                | "delete_failed"
                | "upgrading"
                | "upgrade_pending";
            corda?: {
                /** @description Hostname and port of the Corda node in the Kaleido hybrid network, used by the Kaleido network bridge to connect */
                p2p_address?: string;
                /** @description Hexidecimal string of the Corda node's nodeInfo binary data */
                node_info?: string;
            };
            /** @description Decoded certificate fields of the Corda nodeInfo */
            nodeinfo?: Record<string, never>;
            /** @description URL endpoints for accessing the node and the explorer UI (if the node is a peer) */
            urls?: {
                /** @description URL to access the event stream service over websocket */
                kaleido_connect?: string;
            };
        };
        OauthConfig: components["schemas"]["MongoResource"] & {
            /** @description Auto-generated key for the environment that owns this key */
            environment_id?: string;
            /** @description Auto-generated key for the membership that owns this key */
            membership_id?: string;
            /** @description The DApp that owns this Key */
            dapp_id?: string;
            /** @description User defined name for the OAuth server */
            name?: string;
            /**
             * @description Currently only self-describing JWT tokens are support (Opaque keys requiring REST API calls to decode them are not supported)
             * @enum {string}
             */
            verification_type?: "jwt";
            /** @description A public key to use to verify the token */
            jwt_key_set?: string;
            /**
             * @description The type of the public key
             * @enum {string}
             */
            jwt_key_type?: "jwks" | "ec_pem" | "rsa_pem";
        };
        Organization_Update_Input: {
            /** @description User-friendly organization name, defaults to empty string */
            name?: string;
            plan?: string;
            plan_id?: string;
            /** @description The level of support entitlement for the organization */
            support_level?: number;
            /** @description Email to be exposed on consortia memberships as contact info */
            delegate?: string;
            waitlisted?: boolean;
            /** @description Timestamp of the last time terms and conditions were accepted for this org */
            terms_accepted?: number;
            /** @description Date when the organizations trial is expected to end */
            trial_ends?: string;
            billing_account?: {
                /**
                 * @description The platform provider for the organization's billing
                 * @enum {string}
                 */
                type: "none" | "aws" | "stripe" | "other";
                aws_customer_identifier?: string;
                aws_product_code?: string;
                stripe_customer_id?: string;
            };
            /** @description The Cognito domain name such as 'mydomain.auth.us-east-1.amazoncognito.com' - only used for Enterprise logins */
            cognito_domain?: string;
            /** @description The Cognito user pool ID - only used for Enterprise logins */
            cognito_user_pool_id?: string;
            /** @description The Cognito region - only used for Enterprise logins */
            cognito_region?: string;
            /** @description The client_id of the App client created for Kaleido - only used for Enterprise logins */
            cognito_client_id?: string;
            /** @description The client_secret of the App client created for Kaleido - only used for Enterprise logins */
            cognito_client_secret?: string;
        };
        Organization_Create_Input: components["schemas"]["Organization_Update_Input"] & {
            /** @enum {string} */
            type?: "kaleido" | "enterprise_cognito";
        };
        Organization: components["schemas"]["MongoResource"] &
            components["schemas"]["Organization_Create_Input"] & {
                /** @description Auto-populated field containing the User ID which created the Organization. When converting to an Enterprise Organization this becomes the first user to log in successfully. */
                owner?: string;
            };
        Plan_ResourceLimits: {
            consortia?: {
                per?: {
                    org?: number;
                };
            };
            environments?: {
                per?: {
                    consortia?: number;
                };
                quorum?: {
                    raft?: {
                        per?: {
                            consortia?: number;
                        };
                    };
                    ibft?: {
                        per?: {
                            consortia?: number;
                        };
                    };
                };
                geth?: {
                    poa?: {
                        per?: {
                            consortia?: number;
                        };
                    };
                };
                quiesce?: {
                    after?: {
                        idle_hours?: number;
                        initial_delay?: number;
                    };
                };
            };
            nodes?: {
                per?: {
                    environment?: number;
                    org?: number;
                };
                allowed_sizes?: ("small" | "medium" | "large")[];
                allowed_tiers?: (
                    | "starter"
                    | "team"
                    | "business"
                    | "enterprise"
                )[];
            };
            services?: {
                memberservices?: {
                    per?: {
                        environment?: number;
                    };
                };
                utilityservices?: {
                    per?: {
                        environment?: number;
                    };
                };
                allowed_services?: (
                    | "hdwallet"
                    | "ipfs"
                    | "idregistry"
                    | "openlaw"
                    | "chainlink"
                    | "tether"
                    | "tokens"
                )[];
                allowed_tiers?: (
                    | "preview"
                    | "starter"
                    | "team"
                    | "business"
                    | "enterprise"
                )[];
            };
            configurations?: {
                per?: {
                    environment?: number;
                };
                allowed_configurations?: (
                    | "ethconnect"
                    | "kms"
                    | "opsmetric"
                    | "networking"
                    | "node_config"
                    | "backup"
                )[];
                allowed_tiers?: (
                    | "starter"
                    | "team"
                    | "business"
                    | "enterprise"
                )[];
            };
            memberships?: {
                per?: {
                    consortia?: number;
                };
            };
            dapps?: {
                per?: {
                    membership?: number;
                };
            };
            keys?: {
                per?: {
                    environment?: number;
                };
            };
            roles?: {
                per?: {
                    org?: number;
                };
            };
            ingress?: {
                rps?: {
                    per?: {
                        node?: number;
                    };
                };
                conns?: {
                    per?: {
                        node?: number;
                    };
                };
            };
        };
        Plan: components["schemas"]["MongoResource"] & {
            level?: string;
            enabled?: boolean;
            limits?: components["schemas"]["Plan_ResourceLimits"];
        };
        ProofVerification: {
            /** @description The _id of an Identity Proof */
            proof_id: string;
        };
        ProofVerification_TestCertificate: {
            /** @description Set to true if using Kaleido to generate a compliant test certificate for non-production uses */
            test_certificate: boolean;
        };
        Region: components["schemas"]["MongoResource"] & {
            /** @description Net-plane hostname */
            net_host?: string;
            /**
             * @description Current state of the specified netplane
             * @enum {string}
             */
            state?: "enabled" | "disabled" | "full";
            /** @description Allows creation of environments beyond specified limit */
            allow_overflow?: boolean;
            /** @description Number of environments allowed in the netplane */
            environments?: number;
        };
        Release: components["schemas"]["MongoResource"] & {
            /**
             * @description The Provider associated with this release. `pantheon` represents Hyperledger Besu.
             * @enum {string}
             */
            provider?: "quorum" | "geth" | "pantheon" | "corda" | "fabric";
            /** @description The image tags associated with this release */
            images?: {
                [key: string]: string | undefined;
            };
            /** @description The version - follows semver semantics */
            version?: string;
            /**
             * @description Beta releases include features currently being tested and may be unstable
             * @enum {string}
             */
            release_status?: "beta";
            /** @description The version in padded semver form for easy sorting */
            version_padded?: string;
            /** @description User-friendly description of this release */
            description?: string;
            /** @description A list of EIPs that new environments created in this release will have in the genesis block */
            chain_config?: string[];
            /** @description A list of EIPs an environment at this release can apply to the chain configuration via a hard fork operation */
            optional_eips?: string[];
            /** @description A list of EIPs an environment must already have in the chain configuration before being allowed to upgrade to this release */
            prereq_eips?: string[];
            /**
             * @deprecated
             * @description Optional fields for chain configuration (Ex: chain ID)
             */
            optional_chain_config?: unknown[];
        };
        Role_Update_Input: {
            /**
             * @description The role assigned to the user within this org
             * @enum {string}
             */
            role?: "admin";
        };
        Role_Create_Input: WithRequired<
            components["schemas"]["Role_Update_Input"] & {
                /** @description Auto-populated. The ID of the Organization associated with the role */
                org_id?: string;
                /** @description The ID of the User associated with the role */
                user_id?: string;
                /**
                 * @description The role assigned to the user within this org
                 * @enum {string}
                 */
                role?: "admin";
            },
            "user_id"
        >;
        Role: components["schemas"]["MongoResource"] &
            components["schemas"]["Role_Create_Input"];
        Service_Update_Input: {
            /** @description User-friendly name for the Configuration */
            name?: string;
            /** @description Object with type-specific configuration details */
            details?: components["schemas"]["Details_Others"];
        };
        /** @description Service type specific configuration here */
        Details_Others: unknown;
        /** @description IPFS configuration details */
        Details_IPFS: {
            /**
             * @description Datastore type to be used with IPFS
             * @default flatfs
             * @enum {string}
             */
            datastore_type?: "flatfs" | "badgerds";
        };
        Service_Create_Input: WithRequired<
            components["schemas"]["Service_Update_Input"] & {
                /** @description Auto-populated field denoting the environment containing the Configuration */
                environment_id?: string;
                /** @description Field denoting the membership which owns the Configuration */
                membership_id?: string;
                /**
                 * @description The type of configuration being managed
                 * @enum {string}
                 */
                service?:
                    | "app2app"
                    | "documentstore"
                    | "chainlink"
                    | "ethwallet"
                    | "hdwallet"
                    | "idregistry"
                    | "ipfs"
                    | "rotatesigners"
                    | "tether"
                    | "cloudhsm"
                    | "fabric-ca";
                /**
                 * @description Auto-populated field based on service for tenancy model
                 * @enum {string}
                 */
                service_type?: "utility" | "member";
                /** @description Auto-populated field based on the service */
                service_guid?: string;
                /**
                 * @description Service Instance Size
                 * @enum {string}
                 */
                size?: "small" | "medium" | "large";
                /** @description The public address of any accounts owned by this service, which might potentially have been funded on the main Ethereum network. */
                accounts?: string[];
                details?:
                    | components["schemas"]["Details_Others"]
                    | components["schemas"]["Details_IPFS"];
            },
            "membership_id" | "service"
        >;
        Service: components["schemas"]["MongoResource"] &
            components["schemas"]["Service_Create_Input"] & {
                /** @description Auto-populated field denoting the environment containing the Configuration */
                environment_id?: string;
                /**
                 * @description Auto-populated field based on service for tenancy model
                 * @enum {string}
                 */
                service_type?: "utility" | "member";
                /** @description Auto-populated field based on the service */
                service_guid?: string;
                /** @description Auto-populated set of service specific URLs for communicating with the service. */
                urls?: {
                    [key: string]: string | undefined;
                };
                /**
                 * @description Auto-populated current state of the service
                 * @enum {string}
                 */
                state?:
                    | "provisioning"
                    | "failed"
                    | "started"
                    | "paused"
                    | "upgrading"
                    | "deprovisioning"
                    | "delete_failed";
            };
        Stripe_Billing: {
            /** @description Card funding type. Can be credit, debit, prepaid, or unknown */
            funding?: string;
            /** @description Card brand. Can be American Express, Diners Club, Discover, JCB, MasterCard, UnionPay, Visa, or Unknown. */
            brand?: string;
            /** @description The last four digits of the card. */
            last4?: string;
            /** @description Expiration month */
            exp_month?: string;
            /** @description Expiration year */
            exp_year?: string;
            /** @description Cardholder name */
            name?: string;
            address_line1?: string;
            address_line2?: string;
            address_city?: string;
            address_state?: string;
            address_zip?: string;
            address_country?: string;
        };
        Tenant: components["schemas"]["MongoResource"] & {
            /** @description Field denoting the membership which owns the Tenant */
            membership_id?: string;
            /** @description Auto-generated field denoting the consortium in which this Tenant exists */
            consortia_id?: string;
            /** @description Bind a tenant to a node by using the 'tag' in the Blockchain Application Firewall configuration of that node */
            tag?: string;
            /** @description One or more properties that are used to unique identify this tenant when they authenticate */
            properties?: {
                [key: string]: string | undefined;
            };
        };
        Zone_Update_Input: {
            /** @description Friendly name to identify the deployment zone */
            name?: string;
        };
        Zone_Create_Input: WithRequired<
            components["schemas"]["Zone_Update_Input"] & {
                /**
                 * @description Who is managing the deployment zone
                 * @enum {string}
                 */
                type?: "kaleido";
                /**
                 * @description The cloud which is hosting the deployment zone. Only allowed for Kaleido-hosted deployment zones
                 * @enum {string}
                 */
                cloud?: "aws" | "azure";
                /**
                 * @description Region of the specified platform. Only allowed for Kaleido-hosted deployment zones
                 * @enum {string}
                 */
                region?: "us-east-2";
            },
            "type" | "cloud" | "region"
        >;
        Zone: components["schemas"]["MongoResource"] &
            components["schemas"]["Zone_Create_Input"] & {
                /** @description Auto-generated key for the consortium that owns this deployment zone */
                consortia_id?: string;
                /** @description Auto-generated. Determines the default region to use if none is specified for downstream actions */
                default?: boolean;
            };
        DeployedContract: {
            address?: string;
            genesisTransaction?: string;
            creator?: string;
            contractName?: string;
            description?: string;
            dateVerified?: string;
            compilerVersion?: string;
            optimization?: boolean;
            sourceCode?: string;
            abi?: string;
            /** @description The <a href='platform.html#tag/Ledger/paths/~1ledger~1{consortia_id}~1{environment_id}~1gateway_apis/get'>Gateway API</a> this deployment matched to. Determined at deployment time via runtime bytecode verification. */
            gatewayAPIId?: string;
            runtimeBytecode?: string;
            creationBytecode?: string;
        };
        GatewayAPI: {
            /** @description The Id of the Gateway API. This also matches the promoted <a href='platform.html#tag/Compiled-Contracts'>Compiled Contract</a> ID. */
            _id?: string;
            /** @description The friendly path name of this Gateway API. */
            endpoint?: string;
            abi?: string;
            bytecode?: string;
            devDocs?: string;
            bytecodeHash?: string;
            bytecodeLength?: number;
            /** @description The <a href='platform.html#tag/Contracts'>Contract</a> project ID. */
            consortiaContractId?: string;
            consortiaContractName?: string;
            description?: string;
            hasConstructorParams?: boolean;
            isFactoryDeployEnabled?: boolean;
        };
        GatewayAPIWrapper: {
            /** @description The total number of Gateway API's found */
            totalCount?: number;
            gatewayAPIs?: components["schemas"]["GatewayAPI"][];
        };
        DeployedContractsWrapper: {
            /** @description The total number of contracts found */
            totalCount?: number;
            contracts?: components["schemas"]["DeployedContract"][];
        };
        Block: {
            number?: number;
            hash?: string;
            timestamp?: string;
            transactionCount?: number;
            size?: number;
            miner?: string;
        };
        Transaction: {
            hash?: string;
            status?: string;
            from?: string;
            to?: string;
            timestamp?: string;
            index?: number;
            blockNumber?: number;
            blockHash?: string;
        };
        Transfers: {
            totalCount?: number;
            transactions?: components["schemas"]["Transaction"][];
        };
        TransactionReceipt: {
            /** @description The block containing the fund transaction */
            blockHash?: string;
            /** @description The block containing the fund transaction */
            blockNumber?: number;
            /** @description The contract address created, if the transaction was a contract creation, otherwise null */
            contractAddress?: string;
            /** @description The total amount of gas used when this transaction was executed in the block */
            cumulativeGasUsed?: number;
            /** @description The address the transaction was sent from */
            from?: string;
            /** @description The amount of gas used by this specific transaction alone */
            gasUsed?: number;
            /** @description Logs from the transaction */
            logs?: string[];
            /** @description The bloom filter for the logs of the block. null when its pending block */
            logsBloom?: string;
            /** @description True is transaction succeeded, false is failed */
            status?: boolean;
            /** @description The address the transaction was sent to */
            to?: string;
            /** @description The hash of the transaction */
            transactionHash?: string;
            /** @description Integer of the transactions index position in the block */
            transactionNumber?: string;
        };
        Stats: {
            height?: number;
            transactionCount?: number;
            blockCount?: number;
            avgTransactionsPerBlock?: number;
            failedTransactionCount?: number;
            lastTransactionTimestamp?: string;
            details?: {
                provider?: string;
                consensus?: string;
                status?: string;
            };
        };
    };
    responses: {
        /** @description Application Credential Not Found */
        NotFound: never;
        /** @description Internal Error */
        InternalError: {
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
    };
    parameters: {
        org_id: string;
        apikey_id: string;
        appkey_id: string;
        consortia_id: string;
        contract_id: string;
        compiled_contract_id: string;
        gateway_api_id: string;
        contract_address: string;
        environment_id: string;
        membership_id: string;
        node_id: string;
        service_id: string;
        config_id: string;
        integration_id: string;
        channel_id: string;
        invitation_id: string;
        oauth_id: string;
        role_id: string;
        tenant_id: string;
        zone_id: string;
        proof_id: string;
        block_number: string;
        address: string;
        wallet_address: string;
        account: string;
        tokenId: string;
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}

export type external = Record<string, never>;

export type operations = Record<string, never>;
