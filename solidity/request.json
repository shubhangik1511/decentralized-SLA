{
  "source": "const sendToEmail = args[0];\nconst inviteAccepLinkPrefix = args[1];\nconst timestamp = args[2];\n\nif (!sendToEmail) {\n  throw new Error(\"No email provided.\");\n}\n\nif (!inviteAccepLinkPrefix) {\n  throw new Error(\"No invite link provided.\");\n}\n\nconst inviteId = generateEncryptedString(\n  `${generateStringUsingTs(timestamp)}/${sendToEmail}/${secrets.secretKey}`\n);\nconst inviteHash = generateHash(inviteId);\nconsole.log(\"Invite hash: \" + inviteHash);\n\nif (secrets.courierApiKey) {\n  const inviteLink = `${inviteAccepLinkPrefix}&code=${inviteId}`;\n  await sendEmail(sendToEmail, inviteLink);\n}\n\n// The source code MUST return a Buffer or the request will return an error message\n// Use one of the following functions to convert to a Buffer representing the response bytes that are returned to the client smart contract:\n// - Functions.encodeUint256\n// - Functions.encodeInt256\n// - Functions.encodeString\n// Or return a custom Buffer for a custom byte encoding\nreturn Functions.encodeString(inviteHash);\n\n// ====================\n// Helper Functions\n// ====================\n\n// Function to generate encrypted string using nodejs crypto\n// Reference: https://stackoverflow.com/a/67824801/12027569\nfunction generateEncryptedString(data) {\n  // crypto module\n  const crypto = require(\"crypto\");\n\n  const algorithm = \"aes-256-cbc\";\n\n  // generate 16 bytes of random data\n  const initVector = crypto.randomBytes(16);\n\n  // secret key generate 32 bytes of random data\n  const Securitykey = crypto.randomBytes(32);\n\n  // the cipher function\n  const cipher = crypto.createCipheriv(algorithm, Securitykey, initVector);\n\n  // encrypt the message\n  // input encoding\n  // output encoding\n  let encryptedData = cipher.update(data, \"utf-8\", \"hex\");\n\n  encryptedData += cipher.final(\"hex\");\n  console.log(\"Encrypted message: \" + encryptedData);\n  return encryptedData;\n}\n\n// Function to generate hash using nodejs crypto\n// Reference: https://stackoverflow.com/a/67824801/12027569\nfunction generateHash(data) {\n  const crypto = require(\"crypto\");\n  const hash = crypto.createHash(\"sha256\");\n  return hash.digest(data).toString(\"hex\");\n}\n\nfunction generateStringUsingTs(timestamp) {\n  const ts = String(timestamp);\n  let out = \"\";\n  for (let i = 0; i < ts.length; i += 2) {\n    out += Number(ts.substring(i, 2)).toString(36);\n  }\n  return out;\n}\n\nasync function sendEmail(email, inviteLink) {\n  if (!secrets.courierApiKey) {\n    return;\n  }\n\n  // Structure for POSTING email data to Courier.\n  const emailData = {\n    message: {\n      to: { email },\n      content: {\n        title: \"Welcome to DSLA\",\n        body: \"Click on the link below to get started. \\n\\n {{inviteLink}}\",\n      },\n      data: { inviteLink },\n    },\n  };\n\n  // Build the config object to pass to makeHttpRequest().\n\n  let courierResponse;\n  try {\n    console.log(\"\\nSending email...\");\n    courierResponse = await Functions.makeHttpRequest({\n      url: \"https://api.courier.com/send\",\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: \"Bearer \" + secrets.courierApiKey,\n      },\n      data: emailData,\n    });\n\n    if (courierResponse.error) {\n      throw new Error(\n        \"Courier API responded with error: \" +\n          JSON.stringify(courierResponse.response.data.errors[0])\n      );\n    }\n  } catch (error) {\n    console.log(\"\\nFailed when sending email.\");\n    throw error;\n  }\n\n  console.log(\"\\nSent email...\");\n}\n",
  "secrets": "0xee8fd3d6b50926b119d16dde8cb7533e02fb7e260dd30d71c91263bfca82183ca68e3d841785fc1d046398f467e33048622fc14166bea056b5096e06174731dfab308e5522b24a5088c746fa539fe461b75b77f59cc9237f8f3d96ee4fe83570ef34fd1e5147b4709db6a7f5326d66f4012e169aea0fd26b59bf999781586c59cc94be88ddd2df1c15cdc2b337436bee44e46f73cf8832b8b61778ea1c364a2adf",
  "args": [
    "bchaitanya15@gmail.com",
    "http://example.com/hello",
    "1685264814526"
  ],
  "secretsURLs": [
    "https://gist.github.com/negative0/dee624ecf9fd094066f3589eb2048598/raw"
  ]
}